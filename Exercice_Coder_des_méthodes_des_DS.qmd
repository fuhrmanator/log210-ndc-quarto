# Coder des méthodes à partir des diagrammes de séquence

Pour chacun des diagrammes suivants, écrivez les classes TypeScript avec les méthodes indiquées dans le diagramme.  
[Cet exercice complémente le livre de @craig_uml_2005 à la section F18.6/A20.4.].

::: {.callout-tip}
Vous pouvez utiliser VS Code pour vous aider avec le TypeScript, mais cet outil ne sera pas forcément permis lors d'un examen.
:::

Voici un modèle à suivre. Pour le diagramme suivant:

```{.plantuml #fig-modele caption="Exemple de diagramme de séquence." }
@startuml
scale 1.0
skinparam style strictuml
participant ":A" as B
participant ":B" as A
[-> B : execute(3)
activate B
B -> A : result = setItem("Fred")
activate A

deactivate A
deactivate B
@enduml
```

On code les classes suivantes en TypeScript:

```typescript
class A {
    b: B;  // A envoie un message à B, visibilité d'attribut
    execute(arg0:number):any {
        const result = this.b.setItem("Fred");
    }
}

class B {
    setItem(arg0:string):any {
        //...
    }
}

```

\filbreak

1. Écrivez le code pour la figure suivante.

    ```{.plantuml}
    @startuml
    skinparam style strictuml
    scale 1.0
    participant ":Bernard" as Bob
    participant ":Alice" as Alice
    participant ":Autre" as Other
    [-> Bob : init
    activate Bob
    Bob -> Alice : allô(12)
    activate Alice

    create Other
    Alice --> Other : create

    Alice -->> Bob : "oui"
    deactivate Alice
    [<<-- Bob : 15
    deactivate Bob
    @enduml
    ```

\filbreak

2. Écrivez le code pour la figure suivante décrivant la création de la collection de Vente [tirée de @craig_uml_2005, figure. 17.6].

    ```{.plantuml}
    @startuml
    skinparam style strictuml
    scale 1.0
    participant ":Registre" as r
    note left of r : selon Créateur et\nContrôleur
    ->r : créerNouvelleVente
    activate r
    note right of r : Registre crée une\nVente selon Créateur
    participant ":Vente" as s
    create s
    r-->s : create
    activate s
    note right of s
    selon Créateur, Vente crée une 
    collection vide (par exemple une
    Liste) destinée à mémoriser les
    instances de LigneArticles
    end note
    note left of s
    l'activation de Vente est implicitement dans 
    le constructeur de l'instance de Vente
    end note
    participant "lignesArticles :\nList<LigneArticles>" as li
    create li
    s-->li : create
    deactivate s
    deactivate r
    @enduml
    ```

\filbreak

3. Écrivez le code pour la figure suivante décrivant l'utilisation d'un *Cornet* dans le jeu de Monopoly [tirée de @craig_uml_2005, figure F22.9]

    ```{.plantuml}
    @startuml
    skinparam style strictuml
    scale 1.0
    participant "j : Joueur" as j
    participant ": Cornet" as c
    participant ": Plateau" as p
    participant "pos : Case" as pos

    note over c : Selon Fabrication pure
    -> j : prendreTour
    j -> c : lancer
    j -> c : valTot = getTotal

    j -> p : pos = getCase( pos, valTot )
    j -> pos : atterrirSur( j )
    @enduml
    ```

\filbreak

4. Écrivez le code pour les figures suivantes décrivant les appels polymorphes de la méthode `atterrirSur` dans le jeu Monopoly [tirées de @craig_uml_2005, figures F22.6 et F22.7]

    ```{.plantuml}
    @startuml
    skinparam style strictuml
    scale 1.0
    participant ": CaseImpôts" as im
    participant "j : Joueur" as j
    -> im : atterrirSur(j)
    note left: selon Polymorphisme
    im -> j : c = getCash
    note right : selon Expert
    im -> j : diminuerCash(min(200, 10 % de c))
    note right : selon Expert
    @enduml
    ```

    ```{.plantuml }
    @startuml
    skinparam style strictuml
    scale 1.0
    participant ": CaseAllezEnPrison" as aep
    participant "j : Joueur" as j
    -> aep : atterrirSur(j)
    note left: selon Polymorphisme
    aep -> j : setPosition(prison)
    note right : selon Expert
    @enduml
    ```
