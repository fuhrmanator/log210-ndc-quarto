[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analyse et conception de logiciels",
    "section": "",
    "text": "Cet ouvrage a commencé comme des notes de cours pour le cours Analyse et conception de logiciel (LOG210) dans les programmes de baccalauréat en Génie logiciel (LOG) et en Génie des technologies de l’information (GTI) de l’École de technologie supérieure (ÉTS) à Montréal au Québec. À l’origine, la communauté étudiante dans ces programmes provenaient des « Collèges d’enseignement général et professionnel » (CÉGEP), ayant donc déjà reçu au diplôme d’études collégiales (DEC) dans un programme technique. Ainsi, ces personnes ont déjà appris à programmer dans un langage orienté objet. En effet, cette démarche correspond à l’approche « Computer-Science-first » (CS-first) pour enseigner le génie logiciel Ardis et al. (2015).\nLOG210 a été mis sur pied au début des années 2000 et le livre obligatoire a toujours été le fameux Applying UML and Patterns de Craig Larman qui était à sa 2e édition (2001) à l’époque. En 2005 la 3e édition a été publiée avec plusieurs traductions, notamment celle en français (2005). Pendant plus de 10 ans, le livre de Larman a été fort apprécié par les personnes étudiantes.\nMais pour le corps enseignant donnant le cours, le manque d’exercices dans le livre a toujours été un gros inconvénient. En plus, certains sujets (comme les cas d’utilisation, les précondition des contrats d’opération et les diagrammes de communication) dans le livre de Larman sont moins pertinents en industrie aujourd’hui, puis d’autres sujets (comme le développement piloté par les tests, le travail en équipe, les cadriciels Web) sont devenus plus importants. Une 4e édition n’a jamais été publiée. Finalement, la traduction française du livre est en rupture de stocke depuis 2019. Le présent manuel essaie de pallier tous ces problèmes, sous forme de ressource éducative libre (REL).\nLe contenu de ce manuel est organisé pour les personnes ayant déjà une base et une expérience avec :\nLa notation UML (Unified Modeling Language) est utilisée partout dans ce manuel. Nous faisons une hypothèse que les personnes suivant ce manuel aient déjà vu cette notation avant, mais la familiarité avec UML n’est pas un préalable."
  },
  {
    "objectID": "index.html#pourquoi-une-ressource-éducative-libre",
    "href": "index.html#pourquoi-une-ressource-éducative-libre",
    "title": "Analyse et conception de logiciels",
    "section": "Pourquoi une ressource éducative libre ?",
    "text": "Pourquoi une ressource éducative libre ?\nAujourd’hui les logiciels libres sont très répandus. Dans le cadre de l’enseignement, nous utilisons les dépôts de code source libre comme GitHub et GitLab, car ces plateformes permettent de collaborer, d’évaluer et de valider des logiciels dans les communautés de logiciel libre. Il est donc naturel d’imaginer une forme analogique pour le contenu de ce manuel, soit une ressource éducative libre (REL), qui est également développée à travers un dépôt libre (GitHub dans ce cas).\nPour favoriser la réutilisation, nous avons utilisé plusieurs logiciels libres :\n\nQuarto (2022) (le langage source du texte est Markdown );\nPandoc (2022) et LaTeX (2022) font partie des composantes exploitées par Quarto ;\nPlantUML (2022) pour les figures sous forme de texte (faciles à actualiser).\n\nAutant possibles, les figures sont créés dans une forme vectorielle (comme SVG) plutôt que matricielle (comme JPEG) afin que le texte dans les figures soit « indexable » par les moteurs de recherche.\nFinalement, il y a une tendance à faire des REL pour favoriser l’accès à l’information, pour donner une meilleure inclusivité des personnes apprenantes et enseignantes."
  },
  {
    "objectID": "index.html#livre-complémentaire",
    "href": "index.html#livre-complémentaire",
    "title": "Analyse et conception de logiciels",
    "section": "Livre complémentaire",
    "text": "Livre complémentaire\nCe manuel suit la méthodologie d’analyse et de conception proposée par Craig Larman dans son livre « UML 2 et les Design Patterns » Larman (2005). Le livre est encore populaire et pertinent, mais malheureusement il n’a pas été actualisé depuis sa 3e édition (2005). La traduction française du livre n’est plus en stocke au Québec depuis plusieurs années. Beaucoup de choses ont évolué depuis bientôt vingt ans !\n\n\n\n\n\n\nNote\n\n\n\nAu besoin, des références au livre de Larman sont indiquées par l’icône du livre . Puisqu’il est disponible en français et en anglais, puis il y a des différences avec les numéros de chapitres, nous indiquons une référence avec F et A pour signifier la langue du livre. Par exemple, la matière sur les principes GRASP est dans le chapitre 17 dans la version en anglais. Cependant, à cause des fusions de contenu lors de la traduction, la matière sur GRASP est dans le chapitre 16 dans la version en français. Dans ce cas, à cause des différences de chapitres, F16.10/A17.10 indique la section 16.10 du livre en français et la section 17.10 du livre en anglais. Toutes les références sont données pour la 3e édition du livre.\n\n\n\n\n\n\n\n\nMise en garde\n\n\n\nSi vous avez une autre édition comme la 2e du livre en anglais, ou même une des premières impressions du livre en anglais, les chapitres ne sont pas toujours les mêmes et vous devrez chercher le sujet dans la table des matières.\n\n\nCependant, dans ce manuel vous trouverez également d’autres sujets importants pour un ingénieur : les notions de complexité, le contexte industriel qui affecte les décisions de conception, l’impact de la conception sur d’autres qualités d’un logiciel, le travail en équipe, etc."
  },
  {
    "objectID": "index.html#remerciements",
    "href": "index.html#remerciements",
    "title": "Analyse et conception de logiciels",
    "section": "Remerciements",
    "text": "Remerciements\nComme beaucoup de ressources libres, ce manuel existe grâce à une collaboration avec de nombreuses personnes. La fabriqueREL (ressources éducatives libres) a soutenu financièrement et pédagogiquement l’élaboration du manuel lors de la période 2022-2023. Les conseils avec la dimension Creative Commons de la licence du contenu ont été fort utiles. Nous remercions les membres de suivi du projet dans le cadre ce travail pris en charge par la fabriqueREL pour leur support :\n\nMarianne Dubé, conseillère pédagogique à l’Université de Sherbrooke et coordonnatrice de la fabriqueREL.\nMouna Moumene, bibliothécaire à l’École de technologie supérieure (ÉTS).\nMarjolaine Lewis, conseillère pédagogique et technopédagogique à l’École de technologie supérieure (ÉTS).\nClaude Potvin, conseiller en formation à l’Université Laval.\nStéphane Roux, directeur général du service de soutien à la formation à l’Université de Sherbrooke.\nSerge Allary, vice-recteur adjoint aux études de l’Université de Sherbrooke.\n\nLa fabriqueREL est également une vitrine de rayonnement importante pour les REL au Québec. Elle permet de valoriser le travail réalisé par un membre du corps professoral dans la rédaction d’un manuel libre pour un cours universitaire. Cela favorise une évolution positive dans la culture universitaire au Québec.\nNous tenons aussi à remercier chaleureusement les auxiliaires d’enseignement et les personnes ayant suivi le cours Analyse et conception de logiciels (LOG210) des programmes de baccalauréat en Génie logiciel et Génie des technologies de l’information à l’ÉTS. Leurs commentaires et suggestions constructifs ont permis d’améliorer les versions antérieures de ce manuel qui ont été utilisées dans le cadre de ce cours.\nNous remercions les membres du comité de révision (2023) pour leurs rétroactions constructives :\n\nà compléter, étudiant.e en génie logiciel à l’ÉTS.\nà compléter, étudiant.e en génie des technologies de l’information à l’ÉTS.\nRoberto Erick Lopez-Herrejon, professeur au département de génie logiciel et des TI à l’ÉTS.\n\nFinalement, nous remercions « à déterminer », réviseur.e linguistique à « (à déterminer) », pour la révision du manuel."
  },
  {
    "objectID": "index.html#sources-du-manuel",
    "href": "index.html#sources-du-manuel",
    "title": "Analyse et conception de logiciels",
    "section": "Sources du manuel",
    "text": "Sources du manuel\nCe manuel est écrit en Markdown et les sources sont sur GitHub à https://github.com/fuhrmanator/log210-ndc-quarto. Les versions Web, PDF et EPUB ont été générées par le logiciel Quarto. Pour en savoir plus sur Quarto, visitez https://quarto.org/docs/books."
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "Analyse et conception de logiciels",
    "section": "Licence",
    "text": "Licence\n\nCette œuvre est mise à disposition selon les termes de la Licence Creative Commons Attribution - Partage dans les Mêmes Conditions 4.0 International.\n\n\n\n\nArdis, Mark, Greg Hislop, Mark Sebern, David Budgen, Jeff Offutt, et Willem Visser. 2015. « Software Engineering 2014 - Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering ». ACM: Association for Computing Machinery.\n\n\nGamma, Erich, Richard Helm, Ralph Johnson, et John Vlissides. 1994. Design Patterns: Elements of Reusable Object-Oriented Software. 1ʳᵉ éd. Reading, Mass: Addison-Wesley Professional. http://amazon.com/o/ASIN/0201633612/.\n\n\nLarman, Craig. 2001. Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and the Unified Process. 2nd edition. Upper Saddle River, NJ: Prentice Hall.\n\n\n———. 2005. UML 2 et design patterns. 3ᵉ éd. Paris: Village Mondial.\n\n\n« LaTeX ». 2022. In Wikipedia. https://en.wikipedia.org/w/index.php?title=LaTeX&oldid=1114993597.\n\n\n« Pandoc ». 2022. In Wikipedia. https://en.wikipedia.org/w/index.php?title=Pandoc&oldid=1116852485.\n\n\n« PlantUML ». 2022. In Wikipedia. https://en.wikipedia.org/w/index.php?title=PlantUML&oldid=1111009429.\n\n\n« Quarto ». 2022. 26 octobre 2022. https://quarto.org/."
  },
  {
    "objectID": "AnalyseConception.html#analyse-vs-conception",
    "href": "AnalyseConception.html#analyse-vs-conception",
    "title": "1  Analyse et conception de logiciels",
    "section": "1.1 Analyse vs Conception",
    "text": "1.1 Analyse vs Conception\nL’analyse met l’accent sur une investigation du problème et des besoins plutôt que sur la recherche d’une solution.\nLa conception sous-entend l’élaboration d’une solution conceptuelle répondant aux besoins plutôt que la mise en œuvre de cette solution.\n\n\n\nJoueurnom : StringnbLancers : intnbLancersGagnés : intDéface : intJeuDeDésinclut12joue1*\nFigure 1.1: Diagramme de classes conceptuelles décrivant le problème d’un jeu de dés (adapté du Jeu de dés de Larman 2005, chap. 1). Ceci est élaboré lors d’une activité d’analyse.\n\n\n\n\nDéface : intbrasser()JeuDeDésgetJoueurs()demarrerJeu(nom: string)jouer(nom: string)terminerJeu(nom: string)Joueurnom : stringnbLancers : numbernbLancersGagnés : numberd1d2        [nom]\nFigure 1.2: Diagramme de classes logicielles décrivant une solution au problème du jeu de dés. La conception s’inspire du modèle du problème, afin de faciliter sa compréhension.\n\n\nImaginez un jeu qui est joué dans la vraie vie avec deux dés à six faces. Ensuite, on veut construire un logiciel pour ce jeu et donc on peut spécifier la règle du jeu, dont un de nombreux besoins est de générer un nombre aléatoire entre 1 et 6 (comme un dé à six faces). On peut aussi modéliser ce besoin (un élément du problème) par une classe conceptuelle Dé ayant un attribut face dont sa valeur est un type int. Les personnes travaillant sur un projet vont facilement comprendre ce modèle, car les gens comprennent les objets qui représentent des aspects de la vraie vie.\nDans l’approche proposée par ce manuel une modélisation orientée objet est utilisée et pour l’analyse (classes conceptuelles décrivant le problème et les besoins comme à la figure 1.1) et pour la conception (classes logicielles proposant une solution dont sa représentation est proche de la modélisation du problème comme à la figure 1.2)."
  },
  {
    "objectID": "AnalyseConception.html#sec-DecalageRepresentations",
    "href": "AnalyseConception.html#sec-DecalageRepresentations",
    "title": "1  Analyse et conception de logiciels",
    "section": "1.2 Décalage des représentations",
    "text": "1.2 Décalage des représentations\nVous avez sûrement remarqué que le modèle du problème (figure 1.1) ressemble beaucoup au modèle de la solution (figure 1.2) pour notre exemple de jeu de dés. Cependant, il y a des différences, car une solution comporte des détails sur la dynamique du jeu qui sera codée. Le modèle du problème et le modèle de la solution ne sont pas identiques.\n\n\n\n\n\n\nImaginez une autre solution n’ayant qu’une seule classe Jeu contenant toute la logique du jeu. Avez-vous déjà codé une solution simple comme ça ? C’est un bon design au départ, car c’est simple. Mais au fur et à mesure que vous codez la logique du jeu, bien que ça fonctionne parfaitement, la classe Jeu grossit et devient difficile à comprendre. \n\n\n\nUne caractéristique souhaitable d’un design est qu’il soit facile à comprendre et à valider par rapport au problème qu’il est censé résoudre.  Plus une solution (conception) ressemble à une description (modèle d’analyse) du problème, plus elle est facile à comprendre et à valider. La différence entre la représentation d’un problème et la représentation de sa solution s’appelle le décalage des représentations. C’est un terme complexe pour un principe très intuitif. Méfiez-vous des classes importantes dont leur nom est difficile à tracer au problème. Elles vont rendre votre solution plus difficile à comprendre. Pour des explications de Larman, lisez la section 9.3 .\nL’exemple du jeu est trivial, puisque le problème est relativement simple. Réduire le décalage des représentations est un principe très important surtout lorsque le problème à résoudre est complexe."
  },
  {
    "objectID": "AnalyseConception.html#la-complexité-et-ses-sources",
    "href": "AnalyseConception.html#la-complexité-et-ses-sources",
    "title": "1  Analyse et conception de logiciels",
    "section": "1.3 La complexité et ses sources",
    "text": "1.3 La complexité et ses sources\nUn.e ingénieur.e logiciel est constamment dans une bataille avec un adversaire dont le nom est la complexité. Mais qu’est-ce que la complexité ? La figure 1.3 est une image de la complexité. Reconnaissez-vous le domaine d’où vient cette image ?\nVoici une définition de la complexité :\n\n\n\n\n\n\nComplexité: Caractère de ce qui est complexe, difficile à comprendre, de ce qui contient plusieurs éléments.\n\n\n\n\n\n\nFigure 1.3: « Complexity » (CC BY-SA 2.0) par lytfyre.\n\n\nEn voici quelques exemples en développement de logiciels :\n\nUn problème peut être complexe, par exemple le domaine des lois fiscales pour lequel des logiciels existent pour aider les gens à faire des déclarations de revenus.\nUn projet logiciel peut être complexe, avec plusieurs packages, chacun ayant beaucoup de classes, etc.\nUn cadre d’applications (cadriciel, framework) est toujours complexe. Par exemple un framework comme Angular ou React pour développer un front-end (application frontale), car l’interaction entre l’utilisateur et une application (possiblement répartie dans le nuage) nécessite beaucoup de fonctionnalités supportées par le cadriciel.\nUn algorithme peut être complexe, par exemple, l’algorithme de tri de Shell est plus complexe qu’un simple algorithme de tri à bulles. Notez que la complexité d’un algorithme peut parfois apporter des gains de performance. Mais le codage, le débogage et la maintenance d’une implémentation d’un algorithme complexe seront plus coûteux.\nUn patron de conception peut être complexe, par exemple, les patrons Visiteur, Décorateur, Médiateur, etc. des GoF (1994). Un patron définit des rôles et parfois des classes et du code supplémentaires à créer. Le tout doit s’intégrer dans un design existant (qui a son propre niveau de complexité).\nUn environnement peut être complexe, par exemple les applications mobiles sont plus complexes à développer et à déboguer que les applications simples sur PC, à cause de l’environnement sans fil, des écrans tactiles de tailles différentes, de l’alimentation limitée, etc.\n\nLa figure 1.4 présente les sources de complexité ainsi que leurs noms qu’on va utiliser dans ce manuel :\n\n1.3.1 Complexité inhérente (provenant du problème)\nLa complexité inhérente est au sein du problème que résout un logiciel. Elle est souvent visible à l’utilisateur du logiciel. Elle se compose des parties du logiciel qui sont nécessairement des problèmes difficiles. N’importe quel logiciel qui tente de résoudre ces problèmes aura une manifestation de cette complexité dans son implémentation. Exemple : un logiciel qui aide à faire des déclarations de revenus aura une complexité inhérente due à la complexité des lois fiscales qui spécifient comment doit être préparée une déclaration.\n\n\n1.3.2 Complexité circonstancielle (provenant des choix de conception)\nLes choix que font les ingénieur.e.s dans un projet peuvent amener de la complexité circonstancielle. En tant qu’ingénieur.e.s, nous avons un devoir de contrôler cette forme de complexité, par exemple en prenant soin avec un choix de cadriciel Web ou d’architecture logicielle. La complexité circonstancielle peut aussi être due à des contraintes imposées sur la conception, comme une utilisation obligatoire d’une vieille base de données ou d’une bibliothèque logicielle héritée, d’un langage de programmation, etc. La complexité circonstancielle (aussi appelée accidentelle) peut être gérée avec des technologies, par exemple les débogueurs, les patrons de conception (un Adaptateur pour les bases de données différentes), etc.\n\n\n1.3.3 Complexité environnementale (provenant de l’environnement d’exécution)\nCette forme de complexité comprend des aspects d’une solution qui ne sont pas sous le contrôle des ingénieur.e.s. Dans un environnement d’exécution, il y a des dimensions comme le ramasse-miettes (garbage collection), l’ordonnancement des fils d’exécution (threads) sur un serveur, l’utilisation de containers (à la Docker), etc. qui peuvent affecter la qualité d’un logiciel. Les ingénieur.e.s doivent gérer ces formes de complexité, mais il n’y a pas beaucoup de stratégies évidentes face aux technologies qui évoluent très vite.\n\n\nDomaine (du problème)Conception logicielleSolution exécutableComplexitéinhérenteSpécification d'exigencesComplexitécirconstancielleComplexitéenvironnementaleExemple:Lois fiscales (impôts)Exemples:Framework REST,utilisation du patron Visiteur,intégration avec un logiciel \"ancien\"Exemples:Application mobile,déploiement dans conteneur Docker\nFigure 1.4: Sources de complexité."
  },
  {
    "objectID": "AnalyseConception.html#survol-de-la-méthodologie",
    "href": "AnalyseConception.html#survol-de-la-méthodologie",
    "title": "1  Analyse et conception de logiciels",
    "section": "1.4 Survol de la méthodologie",
    "text": "1.4 Survol de la méthodologie\nLa méthodologie d’analyse et de conception proposée dans ce manuel se base sur celle présentée par Larman (2005).\nVoici les éléments importants documentés dans ce manuel (voir la figure 1.5, qui est une adaptation de plusieurs figures de Larman (2005) ):\n\nil y a une spécification explicite des besoins (?sec-besoins) dans le modèle de cas d’utilisation ;\nà partir de chaque cas d’utilisation (?sec-cu), il y a une conception de haut niveau (l’API du système à développer) documentée sous forme de diagramme de séquence système (DSS) (?sec-dss );\nà partir de chaque DSS, on peut définir un ensemble de contrats d’opération (?sec-contrats), surtout pour les opérations complexes ;\nà partir de l’ensemble des besoins, on construit un modèle du domaine (MDD) (?sec-mdd );\npour faire une conception intuitive et facile à adapter, on propose un modèle de conception sous forme de plusieurs RDCU (?sec-rdcu) qui sont cohérentes avec le MDD (pour diminuer le décalage des représentations) et les contrats ;\npour implémenter les conceptions, on développe du code à partir des diagrammes dans le modèle de conception, ainsi que du code pour tester tout ça selon le développement piloté par les tests (?sec-tdd );\npour gérer la dette technique (?sec-DetteTechnique) on fait du réusinage (?sec-Refactoring) au besoin ;\nle tout se fait de manière évolutive, en itérations courtes selon le Processus unifié.\n\n\n\n\nFigure 1.5: Survol de la méthodologie."
  },
  {
    "objectID": "AnalyseConception.html#développement-itératif-évolutif-et-agile",
    "href": "AnalyseConception.html#développement-itératif-évolutif-et-agile",
    "title": "1  Analyse et conception de logiciels",
    "section": "1.5 Développement itératif, évolutif et agile",
    "text": "1.5 Développement itératif, évolutif et agile\nNous adoptons également un processus moderne de développement avec des itérations, selon une méthodologie « agile ». Dans le chapitre 2 du livre de Craig Larman, on définit le processus itératif et adaptatif ainsi que les concepts fondamentaux du « Processus Unifié », qui est une représentation générique de cette stratégie de développement.\nNous résumons les points importants ainsi :\n\nLe développement itératif et évolutif implique de programmer et de tester précocement un système partiel dans des cycles répétitifs.\nUn cycle est nommé une itération et dure un temps fixe (par exemple, trois semaines) comprenant les activités d’analyse, de conception, de programmation et de test, ainsi qu’une démonstration pour solliciter des rétroactions du client (voir la figure 1.7).\nLa durée d’une itération est limitée dans le temps (timeboxed en anglais), de 2 à 6 semaines. Il n’est pas permis d’ajouter du temps à la durée d’une itération si le projet avance plus lentement que prévu, car cela impliquerait un retard de la rétroaction du client. Si le respect des délais semble compromis, on supprime plutôt des tâches ou des spécifications et on les reprend éventuellement dans une itération ultérieure.\nLes premières itérations peuvent sembler chaotiques, car elles sont loin de la « bonne voie ». Avec la rétroaction du client et l’adaptation, le système à développer converge vers une solution appropriée (voir la figure 1.8). Cette instabilité peut être particulièrement prononcée dans un contexte d’entreprise en démarrage.\nDans une itération, la modélisation (par exemple, avec l’UML) se fait au début et devrait prendre beaucoup moins de temps (quelques heures) que la programmation, qui n’est pas triviale (voir la figure 1.9). Selon le contexte du projet (voir le Spectre de la conception), on peut décider de ne pas faire de la modélisation. Cependant, en fonction de la complexité du projet à réaliser, cela peut amener des risques, ce que l’on appelle la dette technique.\n\n\n\n\nFigure 1.6: Un processus itératif permet de gérer les complexités, car la planification d’une itération peut viser une partie du système et le système évolue à mesure que les itérations avancent. (Cette œuvre, « Modèle du processus itératif », est un dérivé de « Iterative development model » de Krupadeluxe, utilisé sous CC BY-SA 4.0. « Modèle de processus itératif » est sous licence CC BY-SA 4.0 par Christopher Fuhrman.)\n\n\n\n\n\nFigure 1.7: Processus itératif et incrémental (évolutif).\n\n\nLe développement itératif et incrémental amène plusieurs avantages selon Larman (2005) :\n\n\n\n\n\n\n\ndiminution d’échecs, une amélioration de la productivité et de la qualité ;\nune gestion proactive des risques élevés (risques techniques, exigences, objectifs, convivialité, etc.) ;\ndes progrès immédiatement visibles ;\nla rétroaction, l’implication des utilisateurs et l’adaptation précoces ;\nla complexité est gérée (restreinte à une itération) ;\nla possibilité d’exploiter méthodiquement les leçons tirées d’une itération.\n\n\n\n\n\n\n\nFigure 1.8: La rétroaction et la rectification itératives font diminuer l’instabilité des exigences à mesure que le projet avance, car le système à développer converge vers les spécifications et la conception les plus appropriées (adaptation de Larman 2005, fig. 2.2).\n\n\nCependant, il y a des défis associés à ce genre de développement :\n\nInstabilité apparente au début: Dans les itérations initiales, puisqu’on n’a pas beaucoup de temps pour comprendre les exigences, le domaine du client et les contraintes du projet, la compréhension des specifications et la conception sont loin de la « bonne voie ». La conséquence est que les évaluations et les rétroactions peuvent sembler rudes et cela peut être déstabilisantes pour des personnes qui ne sont pas familières avec le processus. La bonne nouvelle est que normalement cette instabilité diminue au fur et à mesure que le projet avance (voir la figure 1.8).\nModifications des objectifs de l’itération en cours au besoin: Il arrive souvent que dans une itération, les choses ne se passent pas comme on a imaginé. Par exemple, l’ensemble des récits utilisateur ou des scénarios de cas d’utilisation visé pour l’itération nécessite plus de travail que prévu. La tendance dans ce cas est de se donner plus de temps pour terminer. Mais cela voudrait dire que la rétroaction de toute l’itération sera retardée. Il serait nécessaire de changer la planification de démonstration avec le client (qui a souvent peu de disponibilités). Donc, le processus nous impose de toujours respecter le délai des itérations. Il s’agit d’une gestion par blocs de temps (en anglais timeboxing). Que faire alors si dans une itération on n’arrivera pas à tout faire ? La résolution est de demander à l’équipe après la moitié de l’itération si les objectifs d’origine peuvent être atteints. Si la réponse est non, on priorise les objectifs en plaçant les objectifs secondaires dans la catégorie « choses à faire » (qui seront faites à une itération ultérieure éventuellement). Voir la figure 1.9. Selon une étude menée par Blincoe et al. (2019) sur trois gros projets itératifs d’IBM, jusqu’à 54 % des exigences de haut niveau ont été déplacées de cette manière. Le but ultime de cette stratégie est de pouvoir faire une démonstration à la fin de l’itération, même si elle ne comprend pas toutes les fonctionnalités visées au début, car la rétroaction régulière sur des choses qui fonctionnent est essentielle.\n\n\n\n\n\nFigure 1.9: Pour respecter la méthode du temps limité, on peut modifier les objectifs d’une itération si le travail est trop important (adaptation de Larman 2005, fig. 2.4).\n\n\n\n\n\n\n\nBlincoe, Kelly, Ali Dehghan, Abdoul-Djawadou Salaou, Adam Neal, Johan Linaker, et Daniela Damian. 2019. « High-level software requirements and iteration changes: a predictive model ». Empirical Software Engineering 24 (3): 1610‑48.\n\n\nGamma, Erich, Richard Helm, Ralph Johnson, et John Vlissides. 1994. Design Patterns: Elements of Reusable Object-Oriented Software. 1ʳᵉ éd. Reading, Mass: Addison-Wesley Professional. http://amazon.com/o/ASIN/0201633612/.\n\n\nLarman, Craig. 2005. UML 2 et design patterns. 3ᵉ éd. Paris: Village Mondial."
  },
  {
    "objectID": "DiagrammesActivites.html#diagrammes-de-flot-de-données-dfd",
    "href": "DiagrammesActivites.html#diagrammes-de-flot-de-données-dfd",
    "title": "2  Diagrammes d’activités",
    "section": "2.1 Diagrammes de flot de données (DFD)",
    "text": "2.1 Diagrammes de flot de données (DFD)\nPour la modélisation de flot de données, il existe une notation pour les diagrammes de flots de données (DFD) . Il ne s’agit pas de l’UML, mais cette notation est encore utilisée (depuis les années 1970).\nUn exemple de diagramme d’activité dans le cadre d’un cours de programmation utilisant GitHub Classrooms est dans la figure 2.2. Ce diagramme qui explique comment GitHub Classrooms permet à l’étudiant qui accepte un devoir (assignment en anglais) sur GitHub Classrooms de choisir son identité universitaire, mais seulement si l’enseignant a téléversé la liste de classe avant d’envoyer les invitations aux étudiants.\n\n\nEnchaînement d'activités pour chaqueClassroom(groupe-cours)Créer ClassroomImporter liste de classe(Identifiants Moodle)Créer Assignment(Individual/Team)Partager (courriel) l'URL d'invitationOpen URLChoisir identifiant MoodleChoisir équipe (ou créer équipe)Dupliquer (fork) le dépôt(au besoin, avec le compted'un membre de l'organisation)Enseignant ou EnseignanteÉtudiant ou ÉtudianteGitHub\nFigure 2.2: Diagramme d’activités pour les activités séquentielles de GitHub Classrooms. (PlantUML)"
  },
  {
    "objectID": "DiagrammesActivites.html#exercices",
    "href": "DiagrammesActivites.html#exercices",
    "title": "2  Diagrammes d’activités",
    "section": "2.2 Exercices",
    "text": "2.2 Exercices\nCes exercices devraient vous aider à comprendre les diagrammes d’activités en UML. Vous devez vous référer au livre du cours pour la bonne notation (Chapitre F25/A28).\n\n\n\n\n\n\nNote\n\n\n\nVous pouvez dessiner les diagrammes à la main et en prendre une photo avec une application comme Microsoft Lens (Android, iOS).\nVous pouvez également utiliser PlantUML. Voici des ressources à ce propos : \n\ntutoriel VSCode sur YouTube ;\nextension PlantUML pour VSCode ;\nPlantUML Gizmo, module supplémentaire Google Docs ;\nPlantText.com.\n\nMéfiez-vous des outils comme Lucidchart ayant seulement des profils superficiels pour UML (voir la ?fig-LucidchartUML).\n\n\n\nExercice 2.1 (Location de voitures) Esquissez le diagramme d’activités lors de la réception de voitures louées (après la location) dans une compagnie. Pour le diagramme, faites attention à la notation UML: cela comprend les objets (pour la voiture et pour la facture), le début et la fin de l’activité, les débranchements, les jointures, les décisions et les fusions.\n\nLes rôles sont le client, le réceptionniste (qui gère la documentation et le paiement de la location) et l’agent (qui gère le traitement des voitures avant la prochaine location).\nLe client rend la voiture et les clés.\nLe réceptionniste note le kilométrage et le niveau d’essence pour calculer la facture.\nLe client paye sa location, selon le montant sur la facture.\nL’agent inspecte la voiture pour la propreté. Si elle n’est pas assez propre, alors l’agent doit laver, rincer et sécher l’extérieur et nettoyer l’intérieur. Ce travail devrait commencer le plus vite possible, après que le réceptionniste ait fini de noter les informations pour la facture.\n\nVoir une solution avec PlantUML.\n\n\nExercice 2.2 (Soumission de devoir Moodle) Dessinez un diagramme d’activité qui modélise ce qui se passe lorsque vous faites un devoir dans Moodle. Votre diagramme doit comprendre les activités de l’enseignant et de l’étudiant (dans les partitions séparées). Le devoir doit être un objet dans le diagramme.\n\n\nExercice 2.3 (Soumission de devoir Google Classrooms) Dessinez un diagramme d’activité qui modélise ce qui se passe lorsque vous faites un devoir dans Google Classrooms. Votre diagramme doit comprendre les activités de l’enseignant et de l’étudiant (dans les partitions séparées). Le devoir doit être un objet dans le diagramme."
  },
  {
    "objectID": "DiagrammesEtats.html#exercices",
    "href": "DiagrammesEtats.html#exercices",
    "title": "3  Diagrammes d’état",
    "section": "3.1 Exercices",
    "text": "3.1 Exercices\n\n\n\n\n\n\nNote\n\n\n\nVous pouvez dessiner les diagrammes à la main et en prendre une photo avec une application comme Microsoft Lens (Android, iOS).\nVous pouvez également utiliser PlantUML. Voici des ressources à ce propos : \n\ntutoriel VSCode sur YouTube ;\nextension PlantUML pour VSCode ;\nPlantUML Gizmo, module supplémentaire Google Docs ;\nPlantText.com.\n\nMéfiez-vous des outils comme Lucidchart ayant seulement des profils superficiels pour UML (voir la ?fig-LucidchartUML).\n\n\n\nExercice 3.1 (États d’un téléphone) Faire un diagramme d’états en UML modélisant les états d’un téléphone intelligent. Considérer une dynamique simplifiée, avec seulement trois états correspondant aux images suivantes :\n\nPour simplifier encore le modèle, le bouton en haut à droite sert pour éteindre et pour allumer l’écran. Le téléphone est initialement éteint. Vous pouvez ignorer l’autre bouton rond au centre en bas. On peut brancher l’alimentation pour charger le téléphone à tout moment, mais le bouton n’a aucun effet sur l’écran lorsque le téléphone est connecté à l’alimentation. Lorsque l’on débranche l’alimentation, l’écran est toujours éteint.\n\n\nExercice 3.2 (Guichet automatique) Faire un diagramme d’états en UML qui correspond au système décrit par les cas d’utilisation suivants (format bref) :\nS’authentifier. Le Client arrive à un guichet automatique bancaire, car il désire effectuer une transaction sur son compte. Le Client introduit sa carte bancaire et le système attend qu’il saisisse le NIP de la carte. Si le NIP est valide pour la carte, alors le système est prêt pour accepter d’autres actions. Sinon, le système enregistre la mauvaise tentative et demande de nouveau au Client de saisir son NIP. À tout moment que le système possède la carte du Client, ce dernier peut annuler la session pour récupérer sa carte.\nGérer guichet. L’Administrateur démarre le système et le système attend l’introduction d’une carte bancaire du Client. Quand le système est dans cet état, l’Administrateur peut aussi l’éteindre.\n\n\n\n\n\nLarman, Craig. 2005. UML 2 et design patterns. 3ᵉ éd. Paris: Village Mondial."
  },
  {
    "objectID": "ConceptionPackages.html#sec-NamespaceTypeScript",
    "href": "ConceptionPackages.html#sec-NamespaceTypeScript",
    "title": "4  Conception de packages",
    "section": "4.1 Absense de package dans TypeScript",
    "text": "4.1 Absense de package dans TypeScript\nEn effet TypeScript n’a pas la notion de package comme dans C# ou Java. Cependant, il y a des pratiques pour organiser logiquement le code et pour éviter les conflits (les collisions) de noms. Rappelons que la notion de package existe dans Java pour :\n\nOrganiser logiquement le code: le type interface java.util.List est disponible dans la bibliothèque java.util)\nÉviter les conflits de nom: les classes java.util.List et ca.etsmtl.log121.fuhrman.projet2.List ont le même nom de base, mais puisqu’elles sont dans deux packages différents, elles peuvent être utilisées dans le même programme (leur « fully qualified name » est différent)\n\nEn TypeScript, on peut atteindre les mêmes objectifs.\n\n4.1.1 Organisation des éléments du code\nL’organisation peut être réalisée grâce aux modules avec les mots-clés export et import. Par exemple :\n// maClasse.ts\nexport class MaClasse {\n  // définition\n}\n// client.ts\nimport { MaClasse } from './maClasse'\nOn organise les fichiers, e.g., maClasse.ts dans les répertoires.\n\n\n4.1.2 Noms sans conflit\nDans l’exemple plus haut, il ne serait pas possible d’avoir deux fichiers nommés maClasse.ts dans le même répertoire, alors il est impossible d’avoir une collision avec le nom du fichier. Donc, on pourrait importer la classe MaClasse de maClasse.ts et la classe MaClasse de lib/projet2/maClasse.ts dans le même programme. Cependant, pour éviter un conflit de nom, on emploie le mot-clé as pour renommer la classe (MaClasseP2) lorsqu’on l’importe :\n// client.ts\nimport { MaClasse } from './maClasse'\nimport { MaClasse as MaClasseP2 } from './lib/projet2/maClasse'\n\n\n4.1.3 Namespaces\nTypeScript offre une autre manière d’organiser et d’éviter les conflits de noms avec namespaces (anciennement les modules internes). L’exemple de Validators est intéressant puisqu’il s’agit d’un namespace commun réparti dans plusieurs fichiers. C’est à utiliser surtout lorsqu’on ne veut pas centraliser tout le code dans un seul (gros) fichier (avec export). Mais comme vous voyez dans l’exemple avec les commentaires dans le code de certains fichiers, e.g., /// <reference path=\"Validation.ts\" />, il est plus compliqué à maintenir."
  },
  {
    "objectID": "DiagrammesDeploiement.html#diagrammes-de-déploiement",
    "href": "DiagrammesDeploiement.html#diagrammes-de-déploiement",
    "title": "5  Diagrammes de déploiement et de composants",
    "section": "5.1 Diagrammes de déploiement",
    "text": "5.1 Diagrammes de déploiement\nUn diagramme de déploiement présente le déploiement sur l’architecture physique. Il sert à documenter :\n\ncomment les fichiers exécutables seront affectés sur les nœuds de traitement et\nla communication entre composants physiques\n\nVoici les éléments importants :\n\nTypes de nœuds\n\nNœud physique (équipement) : Ressource de traitement physique (ex. de l’électronique numérique), dotée de services de traitement et de mémoire destinés à exécuter un logiciel. Ordinateur classique, cellulaire, etc.\nNœud d’environnement d’exécution (EEN execution environment node) : Ressource de traitement logiciel qui s’exécute au sein d’un nœud externe (comme un ordinateur) et offrant lui-même un service pour héberger et exécuter d’autres logiciels, par exemple :\n\nSystème d’exploitation (OS) est un logiciel qui héberge et qui exécute des programmes\nMachine virtuelle (JVM ou .NET)\nMoteur de base de données (ex. PostgreSQL) exécute les requêtes SQL\nNavigateur Web héberge et exécute JavaScript, applets Flash/Java\nMoteur de workflow\nConteneur de servlets ou conteneur d’EJB\n\n\n\nLa figure 5.1 est un exemple de diagramme de déploiement (laboratoire). La figure 5.2 est un exemple de diagramme de déploiement pour le logiciel iTunes d’Apple.\n\n\nBrowser moderne«Système»Système de gestiondes apprentissages(SGA)«Système»Système de gestiondes borderaux(SGB)Application frontaleminimaliste, par exempleles pages web (templates)et un peu de JavaScriptRoutageApplication conçueselon la méthodologieproposée par LarmanSolutionsimpleSource pour lesinfos sur les cours,les étudiants, etc.Destination pour lesrésultats des question-naires et devoirs.API REST niveau 1API REST\nFigure 5.1: Diagramme de déploiement du système à développer pour le laboratoire. (PlantUML)\n\n\n\n\n«device»Apple Web Server«website»iTunes«website»iTunes Store«device»Home Computer«mobile device»iPhone/iPad/etc.«application»iTuneseSetup.exeMedia Library«web browser»«application»iTunesMedia Library«OS»iOSMedia LibraryMedia libraries aresynchronizedbetween devices byiTunesUSB«protocol»iTunes Store Protocol«protocol»HTTP«wireless protocol»iTunes Store Protocol\nFigure 5.2: Diagramme de déploiement pour iTunes d’Apple, inspiré de ceci. (PlantUML)"
  },
  {
    "objectID": "Laboratoires.html#javascripttypescript",
    "href": "Laboratoires.html#javascripttypescript",
    "title": "6  Laboratoires",
    "section": "6.1 JavaScript/TypeScript",
    "text": "6.1 JavaScript/TypeScript\nPour la personne ayant déjà des connaissances Java (de LOG121), il est recommandé d’apprendre les choses dans cet ordre :\n\nJavaScript - un tutoriel intéressant (et libre) est sur fr.javascript.info. Je vous recommande de contribuer à des traductions en français sur GitHub.\nTypeScript - ce tutoriel est en anglais, mais il est adapté à des personnes ayant déjà une expérience en Java/C#.\n\nVoici des points importants pour le projet de laboratoire, organisés pour quelqu’un ayant déjà des connaissances en Java :\n\nTypeScript se traduit (« emit ») en JavaScript, alors il faut comprendre le moteur d’exécution JavaScript.\nPour convertir une chaîne en nombre, pour lire ou écrire un fichier sur disque, etc., on utilise des opérations en JavaScript.\nUn type en TypeScript est comme un ensemble de valeurs plutôt qu’une définition hiérarchique. En Java, il n’est pas possible d’avoir un type pouvant être soit une chaîne soit un nombre. Mais en TypeScript, c’est facile de déclarer un type comme une union de plusieurs types, p. ex. string | number.\nJavaScript a des notions de « truthy » et « falsy » (conversion d’une expression à une valeur booléenne) permettant de vérifier avec moins de code si une variable est définie ou initialisée, etc.\nL’opérateur d’égalité stricte (===) (sans conversion de type)\nLes fonctions fléchées (fat arrow functions en anglais)\nLe traitement asynchrone en JavaScript\n\nPromesses et async/await\n\nLes services REST (GET vs PUT)\nEnvironnement de test (Jest)\nLes gabarits (templates) PUG (anciennement Jade) : Tutoriel (court), Tutoriel (plus complet)\nBootstrap (mise en page avec CSS) : Tutoriel (attention, il faut appliquer les éléments dans les gabarits PUG)\n\nLe lab 0 aborde plusieurs de ces aspects, mais certaines notions sont plus complexes et nécessitent une étude approfondie. Le but de cette section est de donner des tutoriels plus spécifiques. Enseigner la syntaxe ou les principes du langage TypeScript n’est pas le but de ce manuel, mais apprendre à trouver l’information soi-même est essentiel pour une personne travaillant dans les technologies de l’information.\nIl y a un dépôt d’exemples avec TypeScript (utilisant ts-node pour les voir facilement) sur GitHub. Il y a un exemple qui montre comment faire des REST à partir de TypeScript avec le système SGB."
  },
  {
    "objectID": "Laboratoires.html#javascript-truthy-et-falsy-conversion-en-valeur-booléenne",
    "href": "Laboratoires.html#javascript-truthy-et-falsy-conversion-en-valeur-booléenne",
    "title": "6  Laboratoires",
    "section": "6.2 JavaScript : Truthy et Falsy (conversion en valeur booléenne)",
    "text": "6.2 JavaScript : Truthy et Falsy (conversion en valeur booléenne)\nJavaScript offre un mécanisme simple pour vérifier des valeurs dans une expression if. Imaginez l’exemple suivant :\nlet maVariable;\n\n// d'autres instructions...\n\nif (maVariable != undefined \n    && maVariable != null \n    && maVariable != '') {\n  // on peut faire quelque chose avec maVariable ...\n}\nOn vérifie trois possibilités pour maVariable avant de l’utiliser. Ce genre de situation arrive souvent en JavaScript, puisque les objets peuvent prendre les valeurs différentes selon le contexte. Il serait bien de pouvoir réduire la quantité de code dans ces cas.\nGrâce à la notion de conversion de valeur selon la règle de « truthy » et « falsy », JavaScript permet de simplifier les instructions en une seule condition, sans ET (&&), en convertissant la valeur de maVariable en booléenne true ou false:\n// conversion booléenne selon la règle de \"truthy\" et \"falsy\"\nif (maVariable) {\n  // on peut faire quelque chose avec maVariable ...\n}\nIl faut comprendre la règle de conversion en valeur booléenne selon « truthy » et « falsy ». En fait, il est plus simple de commencer par les valeurs se traduisant en false (« falsy »), car tout ce qui ne l’est pas est donc true (« truthy »).\n\n6.2.1 Falsy\nLes valeurs suivantes se convertissent en false dans une condition :\n\nfalse\nnull\nundefined\n0 (attention, c’est parfois un piège)\nNaN (not a number)\n'' ou \"\" (chaîne vide)\n\n\n\n6.2.2 Truthy\nTout ce qui n’est pas converti en false (expliqué ci-dessus) est converti en true. En voici quelques exemples :\n\n{} (objet vide)\n[] (tableau vide)\n-20\netc.\n\n\n\n\n\n\n\nMise en garde\n\n\n\nN’oubliez pas que la valeur de 0 est « falsy » dans une condition. C’est souvent un piège en JavaScript quand on considère les variables qui peuvent avoir une valeur numérique. Par exemple, si on fait if (maVariable) pour tester si une variable est définie, si la variable est définie et a sa valeur est 0, la condition sera false."
  },
  {
    "objectID": "Laboratoires.html#sec-ContributionsEquipe",
    "href": "Laboratoires.html#sec-ContributionsEquipe",
    "title": "6  Laboratoires",
    "section": "6.3 Évaluer les contributions des membres de l’équipe",
    "text": "6.3 Évaluer les contributions des membres de l’équipe\nIl existe un outil nommé gitinspector qui peut indiquer le niveau d’implication des membres de l’équipe dans un projet sur GitHub. Étant donné que les laboratoires de ce manuel utilise un squelette avec les tests, les fichiers src de TypeScript, les modèles PlantUML et le README.md, il est possible d’utiliser gitinspector pour voir des rapports de contribution sur chacun des volets.\nPour faciliter l’utilisation de l’outil, le professeur Fuhrman a créé un script en bash. Voici comment l’utiliser :\n\nInstaller gitinspector dans npm avec la commande npm install -g gitinspector\nTélécharger le script\n\ngit clone \\\nhttps://gist.github.com/fuhrmanator/b5b098470e7ec4536c35ca1ce3592853 \\\ncontributions\nCloning into 'contributions'...\nremote: Enumerating objects: 10, done.\nremote: Counting objects: 100% (10/10), done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 10 (delta 3), reused 7 (delta 2), pack-reused 0\nUnpacking objects: 100% (10/10), 2.02 KiB | 82.00 KiB/s, done.\n\nLancer le script sur un dépôt de code source, par exemple sga-equipe-g02-equipe-4:\n\ncd contributions\n./contributions.sh ../sga-equipe-g02-equipe-4/\ngitinspector running on ../sga-equipe-g02-equipe-4/ : patience...\nContributionsÉquipeTest.html\nContributionsÉquipeModèles.html\nContributionsÉquipeDocs.html\nContributionsÉquipeTypeScript.html\nContributionsÉquipeViews.html\nLes fichiers .html sont créés pour les contributions Test, Modèles, Docs, TypeScript et Views. Chaque rapport indique les contributions selon deux perspectives :\n\nLe nombre de soumissions par auteur (activité git)\nLe nombre de lignes par auteur encore présentes et intactes dans la version HEAD\n\nVous pouvez voir un exemple du rapport à la figure 6.1.\n\n\n\nFigure 6.1: Exemple de rapport généré par gitinspector.\n\n\n\n6.3.1 Faire le bilan de la contribution de chacun\nAprès l’évaluation à la fin de chaque itération, il est important de considérer combien chacun a contribué au projet et de valider avec les responsabilités prévues dans le plan de l’itération. Il est normal d’avoir un écart entre le travail prévu et le travail effectué. Un des objectifs du bilan est d’essayer d’expliquer les gros écarts et de corriger ou mitiger les problèmes.\nPar exemple, on peut voir à la figure 6.1 que les deux coéquipiers Anne et Justin ont fait une contribution beaucoup plus importante que les autres coéquipiers Francis et Mélanie. Dans le bilan de l’itération, on doit indiquer explicitement ce fait, même avec des pourcentages.\n\n\n\n\n\n\nImportant\n\n\n\nUne phrase vague comme « certains ont travaillé plus que d’autres » est une formulation diplomatique, mais elle n’est pas assez explicite et n’est pas une résolution proactive du problème le cas échéant.\n\n\n\n\n6.3.2 Proposer des solutions si besoin\nUne inégalité importante dans les contributions est un signal d’alarme. On doit agir, mais on commence par poser des questions, par exemple :\n\nEst-ce que Francis et Mélanie sont à l’aise avec les technologies utilisées dans le lab, ont-ils besoin de coaching ?\nSont-ils des « parasites » ou « mollassons » (Oakley et al. 2004) (traduction française de l’article )? À certaines universités, le plan de cours vous permet d’exclure leurs noms du rapport (et ils auront une note de zéro pour la remise), mais seulement s’ils n’ont rien fait du tout (ce qui n’est pas le cas dans l’exemple ci-dessus). Une personne exclue de cette manière va probablement abandonner le cours et vous perdrez définitivement un coéquipier.\nEst-ce que Anne et Justin ont laissé suffisamment de liberté aux autres pour faire une contribution importante ? Font-ils assez confiance aux autres ?\nAvez-vous fait un plan d’itération assez détaillé pour que chacun puisse contribuer adéquatement ? Dans l’exemple ci-dessus, peut-être Francis et Mélanie ont-ils trouvé ça difficile de savoir où contribuer ?\nEst-ce que tout le monde assiste aux séances de laboratoire ?\nEst-ce que tout le monde travaille au moins 6 heures en dehors des séances encadrées?\nEst-ce que certains coéquipiers travaillent excessivement, sans donner la chance aux autres de contribuer ? N’oubliez pas que les laboratoires sont une manière d’apprendre à pratiquer la matière de ce manuel. Laisser un ou deux coéquipiers faire plus de travail peut nuire à la valeur pédagogique des laboratoires (ça peut faire mal à l’examen final pour ceux qui ont moins contribué). Il y a aussi un risque sur le plan de la Redondance des compétences dans l’équipe (Bus Factor), surtout si un coéquipier qui travaille beaucoup plus que les autres éprouve un problème d’épuisement à cause du fait qu’il travaille trop.\nEst-ce que tout le monde utilise un moyen de communiquer de manière synchrone et asynchrone (Slack, Discord, Teams, etc.) ? Le courriel n’est pas l’outil idéal pour coordonner un travail en équipe.\netc.\n\nDans le bilan il faut constater les faits et proposer des solutions pour éviter des inégalités importantes sur le plan de la contribution dans les prochaines itérations. Ainsi, vous gérez les problèmes de manière plus proactive.\n\n\n6.3.3 FAQ pour gitinspector\nQ : Comment fusionner le travail réalisé par le même coéquipier, mais avec plusieurs comptes (courriels) différents ?\nR : La solution est avec le fichier .mailmap. Vous pouvez rapidement générer un fichier de base avec la commande :\ngit shortlog -se | sed \"s/^.*\\\\t//\"  > .mailmap\nEnsuite, modifiez le fichier .mailmap pour respecter ce format :\nPrénom Nom Désirés <courriel> Prénom Nom Non-Désirés <courriel>\nPar exemple, soit le .mailmap initial qui contient quatres entrées pour le même auteur :\nC. Fuhrman <christopher.fuhrman@etsmtl.ca>\nChristopher (Cris) Fuhrman <christopher.fuhrman@etsmtl.ca>\nChristopher Fuhrman <christopher.fuhrman@etsmtl.ca>\nCris Fuhrman <fuhrmanator+git@gmail.com>\nOn décide de garder l’alias C. Fuhrman <christopher.fuhrman@etsmtl.ca> pour chaque nom :\nC. Fuhrman <christopher.fuhrman@etsmtl.ca>\nC. Fuhrman <christopher.fuhrman@etsmtl.ca> Christopher (Cris) Fuhrman <christopher.fuhrman@etsmtl.ca>\nC. Fuhrman <christopher.fuhrman@etsmtl.ca> Christopher Fuhrman <christopher.fuhrman@etsmtl.ca>\nC. Fuhrman <christopher.fuhrman@etsmtl.ca> Cris Fuhrman <fuhrmanator+git@gmail.com>\nLe nom que vous mettez sera celui qui apparaît dans les rapports la prochaine fois qu’ils seront générés.\nQ : Comment exclure le travail réalisé par un chargé de laboratoire (par exemple le clone initial dans GitHub Classroom) ?\nR : La solution est d’ajouter le nom de l’auteur dans le tableau du script contributions.sh à la ligne suivante avec authorsToExcludeArray. Attention :\n\nIl n’y a pas de , entre les éléments des tableaux en bash.\nLe nom d’un auteur ayant un accent ne sera pas reconnu. Il faut changer le nom dans le .mailmap pour qu’il n’y ait pas d’accents, ou utiliser une chaîne partielle comme \"Benjamin Le\" pour exclure les contributions de \"Benjamin Le Dû\".\n\nauthorsToExcludeArray=(\"C. Fuhrman\" \"Benjamin Le\" \"Yvan Ross\")\nQ : J’ai une autre question…\nR : Il y a aussi une FAQ sur le dépôt de gitinspector.\n\n\n\n\nOakley, Barbara, RM Felder, R Brent, et I Elhajj. 2004. « Coping with Hitchhikers and Couch Potatoes on Teams ». Journal of Student Centered Learning 2 (1): 32‑34. https://www.cs.cornell.edu/courses/cs3110/2018fa/teams/hitchhikers.html."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliographie",
    "section": "",
    "text": "Ardis, Mark, Greg Hislop, Mark Sebern, David Budgen, Jeff Offutt, and\nWillem Visser. 2015. “Software Engineering 2014 -\nCurriculum Guidelines for Undergraduate Degree\nPrograms in Software Engineering.” ACM:\nAssociation for Computing Machinery.\n\n\nBlincoe, Kelly, Ali Dehghan, Abdoul-Djawadou Salaou, Adam Neal, Johan\nLinaker, and Daniela Damian. 2019. “High-Level Software\nRequirements and Iteration Changes: A Predictive Model.”\nEmpirical Software Engineering 24 (3): 1610–48.\n\n\nGamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. 1994.\nDesign Patterns: Elements of\nReusable Object-Oriented\nSoftware. 1st ed. Reading, Mass: Addison-Wesley\nProfessional. http://amazon.com/o/ASIN/0201633612/.\n\n\nLarman, Craig. 2001. Applying UML and\nPatterns: An Introduction to\nObject-Oriented Analysis and Design and the\nUnified Process. 2nd edition. Upper Saddle\nRiver, NJ: Prentice Hall.\n\n\n———. 2005. UML 2 et design patterns. 3rd ed.\nParis: Village Mondial.\n\n\n“LaTeX.” 2022. In Wikipedia. https://en.wikipedia.org/w/index.php?title=LaTeX&oldid=1114993597.\n\n\nOakley, Barbara, RM Felder, R Brent, and I Elhajj. 2004. “Coping\nwith Hitchhikers and Couch Potatoes on Teams.” Journal of\nStudent Centered Learning 2 (1): 32–34. https://www.cs.cornell.edu/courses/cs3110/2018fa/teams/hitchhikers.html.\n\n\n“Pandoc.” 2022. In Wikipedia. https://en.wikipedia.org/w/index.php?title=Pandoc&oldid=1116852485.\n\n\n“PlantUML.” 2022. In Wikipedia. https://en.wikipedia.org/w/index.php?title=PlantUML&oldid=1111009429.\n\n\n“Quarto.” 2022. October 26, 2022. https://quarto.org/."
  },
  {
    "objectID": "Exercice_Critique_d-une_conception.html#sec-DDC_Emojiopoly",
    "href": "Exercice_Critique_d-une_conception.html#sec-DDC_Emojiopoly",
    "title": "7  Critique d’une conception",
    "section": "Diagramme de classes d’Emojiopoly",
    "text": "Diagramme de classes d’Emojiopoly\nPour visualiser la conception, nous avons généré un diagramme des classes en UML avec l’outil tplant :\n\n\nCardtext: stringaction: \"advance\" | \"back\" | \"choice\" | \"payeach\" | \"collecteach\" |\"doubletransport\" | \"earn\" | \"pay\" | \"stealmoney\" | \"stolenmoney\" |\"streetrepairs\" | \"gotojail\"value?: string | number | number[]MonopolyGamejackpot: numbercurrentTurnIndex: numberconsecutiveDoubles: numberplayers: Player[]currentPlayer: Playerdice: number[]isTurnFinished: booleanunpaidDebts: Debt[]chanceCards: Card[]chestCards: Card[]chanceCardIndex: numberchestCardIndex: numberboard: Square[]playerNames: string[]houseRules: HouseRulesmessageEventHandler: (message: string) => voidaddToJackpot(amount: number): voidrollDice(die1?: number, die2?: number): voidmoveToSquare(newSquare: Square, awardSalary?: boolean): voidsendToJail(): voidmoveBack(numberOfSpaces: number): voidpostBail(): voidtakeChance(): voidtakeChest(): voidhandleCard(card: Card): voidmovePlayer(): voidpayDebts(): voidfinishTurn(): voidHouseRulesPlayerownedProperties: Property[]currentSquare: SquareturnsInJail: numbername: stringmoney: numberPropertybuildingsCount: numberisMortgaged: booleanowner: Playername: stringcolor: \"brown\" | \"lightblue\" | \"pink\" | \"orange\" | \"red\" | \"yellow\" |\"green\" | \"blue\" | \"white\"price: numberrent: number[] | \"transport\" | \"utility\"buildPrice: numberSquareoccupants: Player[]squareContents: \"gotojail\" | Property | \"go\" | \"jail\" | \"parking\" |\"chance\" | \"chest\" | \"incometax\" | \"supertax\"addOccupant(occupant: Player): voidremoveOccupant(occupant: Player): voidDebtamount: numbergame: MonopolyGamedebtor: Playercreditor: PlayerinitialAmount: numberpayDebt(): voidtoString(): string**1**1*11*11\nFigure 7.1: Diagramme de classes logicielles (TypeScript) pour le projet Emojiopoly"
  },
  {
    "objectID": "Exercice_Critique_d-une_conception.html#sec-MDD_Monopoly",
    "href": "Exercice_Critique_d-une_conception.html#sec-MDD_Monopoly",
    "title": "7  Critique d’une conception",
    "section": "Modèle du domaine de Monopoly",
    "text": "Modèle du domaine de Monopoly\nPuisque la solution Emojiopoly est en anglais, vous pouvez regarder le modèle du domaine de Monopoly en français et en anglais pour vous aider à comprendre les termes.\n\n\nJeuDeMonopolycompteurRondsDévaleurPlateauPionnomJoueurargentnomCasenomPropriétéprixCaseOrdinaireCaseDépartCaseImpôtsCaseTerrainCaseGareCaseServicePublicPossède0..1*Possède11Est-sur0..81140Joue2..81Joué-avec12Joué-sur11\nMDD (version française) de Monopoly proposé par Larman (2005)\n\n\n\n\nMonopolyGameroundCountDiefaceValueBoardTokennamePlayercashnameSquarenamePropertypriceRegularSquareGoSquareIncomeTaxSquareLotSquareRailroadSquareUtilitySquareOwns0..1*Owns11Is-on0..81140Plays2..81Played-with12Played-on11\nMDD (version anglaise) de Monopoly proposé par Larman (2005)\n\n\n\n\n\n\nLarman, Craig. 2005. UML 2 et design patterns. 3ᵉ éd. Paris: Village Mondial."
  },
  {
    "objectID": "Exercice_Coder_des_méthodes_des_DS.html",
    "href": "Exercice_Coder_des_méthodes_des_DS.html",
    "title": "8  Coder des méthodes à partir des diagrammes de séquence",
    "section": "",
    "text": "Pour chacun des diagrammes suivants, écrire les classes TypeScript avec les méthodes indiquées dans le diagramme. (Cet exercice complémente le livre de Larman 2005 à la section F18.6/A20.4.)\n\n\n\n\n\n\nAstuce\n\n\n\nVous pouvez utiliser VSCode pour vous aider avec le TypeScript, mais cet outil n’est pas forcément permis lors d’un examen.\n\n\nVoici un modèle à suivre. Pour le diagramme suivant :\n\n\n:A:Bexecute(3)result = setItem(\"Fred\")\nFigure 8.1: Exemple de diagramme de séquence.\n\n\nOn code les classes suivantes en TypeScript :\nclass A {\n    b: B;  // A envoie un message à B, visibilité d'attribut\n    execute(arg0:number):any {\n        const result = this.b.setItem(\"Fred\");\n    }\n}\n\nclass B {\n    setItem(arg0:string):any {\n        //...\n    }\n}\n\nÉcrire le code pour la figure suivante.\n:Bernard:Aliceinitallô(12)create:Autre\"oui\"15\n\n\nÉcrire le code pour la figure suivante décrivant la création de la collection de Vente (tirée de Larman 2005, figure. 17.6).\n:Registreselon Créateur etContrôleurcréerNouvelleVenteRegistre crée uneVente selon Créateurcreate:Venteselon Créateur, Vente crée unecollection vide (par exemple uneList) destinée a mémoriser lesinstances de LigneArticlesl'activation de Vente est implicitement dansle constructeur de l'instance de VentecreatelignesArticles :List<LigneArticles>\n\n\nÉcrire le code pour la figure suivante décrivant l’utilisation d’un Cornet dans le jeu de Monopoly (tirée de Larman 2005, fig. F22.9)\nj : Joueur: Cornet: Plateaupos : CaseSelon Fabrication pureprendreTourlancervalTot = getTotalpos = getCase( pos, valTot )atterrirSur( j )\n\n\nÉcrire le code pour les figures suivantes décrivant les appels polymorphes de la méthode atterrirSur dans le jeu de Monopoly (tirées de Larman 2005, fig. F22.6 et F22.7)\n: CaseImpôtsj : JoueuratterrirSur(j)selon Polymorphismec = getCashselon ExpertdiminuerCash(min(200, 10% de c))selon Expert\n: CaseAllezEnPrisonj : JoueuratterrirSur(j)selon PolymorphismesetPosition(prison)selon Expert\n\n\n\n\n\nLarman, Craig. 2005. UML 2 et design patterns. 3ᵉ éd. Paris: Village Mondial."
  },
  {
    "objectID": "Exercice_Adaptateur_pour_Maps_CF.html",
    "href": "Exercice_Adaptateur_pour_Maps_CF.html",
    "title": "9  Adaptateur pour Maps",
    "section": "",
    "text": "Proposez une mise en oeuvre du patron GoF Adaptateur pour un système de livraison qui peut être configuré avec trois variantes du service de calcul d’itinéraires :\n\nGoogle Maps\nBing Maps\nApple Maps\n\nLe système veut obtenir une liste d’étapes (des directions) pour se rendre à une destination à partir d’un point de départ. L’utilisateur du système pourra décider lequel des services lui convient dans les préférences.\nLe but de l’exercice est de déterminer l’interface stable (Protection des variations GRASP) étant donné les variantes des services de calcul d’itinéraires. Cela peut être un diagramme de classe réalisé avec PlantUML."
  },
  {
    "objectID": "Annexe_Cas_utilisation_Réserver_livre.html",
    "href": "Annexe_Cas_utilisation_Réserver_livre.html",
    "title": "Appendix A — Cas d’utilisation - Réserver un livre de la bibliothèque",
    "section": "",
    "text": "Parties prenantes et intérêts:\n- Le Membre. Il veut un moyen de recherche exact et rapide et ne veut pas que la Bibliothèque mémorise des informations sur ses recherches (confidentialité). Il veut pouvoir réaliser des réservations aisément, obtenir un service rapide en fournissant un minimum d’efforts. Il veut également une preuve de réservation.\n- La Bibliothèque. Elle veut enregistrer correctement les réservations et satisfaire les souhaits des membres.\nPréconditions: Le Membre est identifié et authentifié\nActeur principal : Membre\n\nLe membre choisit la fonction « recherche » et saisit du texte décrivant le livre (par exemple, une partie du titre, « UML »).\nLe système affiche une liste de livres (le titre, l’auteur et l’année) correspondant à la recherche, par exemple, « UML2 et le design patterns, Craig Larman, 2005 » et « UML par la pratique, Pascal Rocques, 2009 ».\nLe membre choisit un livre parmi les résultats, par exemple, « UML2 et les design patterns, Craig Larman, 2005 ».\nLe système affiche les informations détaillées du livre (le titre, l’auteur, le numéro ISBN, la maison d’édition, le numéro de l’édition et l’année) ainsi que la liste de tous les exemplaires du livre indiquant s’ils sont disponibles ou pas, par exemple, deux exemplaires du livre « UML2 et les design patterns », un avec l’identificateur d’exemplaire « 1 » qui est disponible et un avec l’identificateur d’exemplaire « 2 » qui n’est pas disponible.\nLe membre réserve un exemplaire du livre qui est disponible.\nLe système confirme la réservation en affichant un numéro de réservation avec le nom du membre et le code de l’exemplaire du livre.\n\nExtensions (scénarios alternatifs) :\n\nAucun livre ne correspond au texte de la recherche.\n\nLe système affiche un message indiquant qu’aucun livre n’a été trouvé.\nLe membre lance une nouvelle recherche.\n\n\n\n\nTous les exemplaires ne sont pas disponibles.\n\nLe système affiche toutes les informations du livre et des exemplaires, mais un message indique qu’il n’est pas possible de réserver, faute d’exemplaires disponibles.\nLe membre lance une nouvelle recherche."
  },
  {
    "objectID": "Annexe_Cas_utilisation_Traiter_vente.html#sec-DSS_traiter_vente",
    "href": "Annexe_Cas_utilisation_Traiter_vente.html#sec-DSS_traiter_vente",
    "title": "Appendix B — Cas d’utilisation - Traiter une vente",
    "section": "B.1 DSS",
    "text": "B.1 DSS\n\n\nDSS pour le scénarioTraiter vente:Caissier:SystèmedémarrerVenteloop[reste des articles]saisirArticle(codeArticle:int, quantité:int)description, totalterminerSale()total with taxesfairePaiement(montant:Monnaie)rendu de monnaie, reçu\nDSS pour le scénario Traiter Vente de Larman (2005)"
  },
  {
    "objectID": "Annexe_Cas_utilisation_Traiter_vente.html#mdd-partiel",
    "href": "Annexe_Cas_utilisation_Traiter_vente.html#mdd-partiel",
    "title": "Appendix B — Cas d’utilisation - Traiter une vente",
    "section": "B.2 MDD partiel",
    "text": "B.2 MDD partiel\nLigneArticlequantité:intVentedateHeure: DateHeureestTerminée : booleanPaiementmontant:MonnaieMagasinnom:Stringadresse:StringDescriptionProduitdescription : Stringprix : MoneycodeArticle : intCatalogueProduitRegistreContient1..*1Héberge1..*1Saisie-sur11Payée-par111*Décrite-par*1\n\n\n\n\nLarman, Craig. 2005. UML 2 et design patterns. 3ᵉ éd. Paris: Village Mondial."
  },
  {
    "objectID": "Annexe_Cas_utilisation_Ouvrir_caisse.html#terminologie",
    "href": "Annexe_Cas_utilisation_Ouvrir_caisse.html#terminologie",
    "title": "Appendix C — Cas d’utilisation - Ouvrir la caisse",
    "section": "C.1 Terminologie",
    "text": "C.1 Terminologie\nQuelques termes du domaine d’affaires doivent être compris avant de procéder :\n\n\n\nPlateau-billets et tiroir-caisse. Capture d’écran de la vidéo sur YouTube.\n\n\n\nTiroir-caisse\n\nC’est la partie de la caisse qui s’ouvre, dans laquelle on peut placer un plateau-billets.\n\nPlateau-billets\n\nC’est un conteneur pour les billets d’argent et des pièces de monnaie qui facilite le changement de personnel à une caisse. Chaque caissier ou caissière possède un plateau-billets et l’apporte lorsqu’il commence ou termine un quart de travail."
  },
  {
    "objectID": "Annexe_Cas_utilisation_Ouvrir_caisse.html#cas-dutilisation-ouvrir-la-caisse",
    "href": "Annexe_Cas_utilisation_Ouvrir_caisse.html#cas-dutilisation-ouvrir-la-caisse",
    "title": "Appendix C — Cas d’utilisation - Ouvrir la caisse",
    "section": "C.2 Cas d’utilisation : Ouvrir la caisse",
    "text": "C.2 Cas d’utilisation : Ouvrir la caisse\nActeur principal : Caissier\nPréconditions : La caisse est libre et son tiroir-caisse est vide (il n’y a pas de plateau dedans).\nGaranties de succès (postconditions) : Le caissier ou la caissière est authentifiée. Son plateau-billets est placé dans le tiroir-caisse et son identificateur est enregistré. Le montant d’argent du plateau est enregistré. L’heure de l’arrivée du caissier est enregistrée.\nScénario principal (succès)\n\nLe Caissier ou la caissière arrive à la caisse avec son plateau-billets.\nLe Caissier ou la caissière saisit son identifiant et son mot de passe dans la boîte de dialogue d’authentification.\nLe Système authentifie le Caissier ou la caissière.\nLe Système ouvre le tiroir-caisse et demande au Caissier ou à la caissière de poser son plateau dans le tiroir-caisse.\nLe Caissier ou la caissière pose son plateau dans le tiroir-caisse.\nLe Système reconnaît l’identificateur du plateau.\nLe Système demande au Caissier ou à la caissière de saisir le montant d’argent du plateau.\nLe Caissier ou la caissière saisit le montant d’argent du plateau.\nLe Système demande au Caissier ou à la caissière de fermer le tiroir-caisse.\nLe Caissier ou la caissière ferme le tiroir-caisse.\n\nSpécifications particulières :\nLes caisses sont configurées avec un modèle de plateau-billets comme celui-ci : (voir exemple sur Youtube)\nFréquence d’occurrence : Normalement, au début du quart de travail de chaque caissier."
  },
  {
    "objectID": "Annexe_Cas_utilisation_Ouvrir_caisse.html#modèle-du-domaine-partiel",
    "href": "Annexe_Cas_utilisation_Ouvrir_caisse.html#modèle-du-domaine-partiel",
    "title": "Appendix C — Cas d’utilisation - Ouvrir la caisse",
    "section": "C.3 Modèle du domaine partiel",
    "text": "C.3 Modèle du domaine partiel\nVoici un exemple pour le système POS NextGen. Noter les nouvelles classes conceptuelles PlateauBillets (un objet physique) et MisePlateau (une transaction) faisant partie du scénario d’Ouvrir la caisse.\n\n\n\nModèle du domaine partiel\n\n\nOn remarque que lorsqu’un Registre (Caisse) n’a pas de Caissier (l’état du système au début du cas d’utilisation), l’objet Registre n’est associé à aucun objet Caissier. Nous avons donc modifié les cardinalités de l’association en conséquence. C’est une différence par rapport au modèle du domaine de base présenté par Larman, qui n’avait pas considéré ce cas d’utilisation, bien qu’il est dans l’ensemble des spécifications du système.\nLes associations en rouge sont celles qui sont affectées par la dynamique de ce cas d’utilisation."
  },
  {
    "objectID": "Annexe_Cas_utilisation_Ouvrir_caisse.html#diagramme-de-séquence-système-dss",
    "href": "Annexe_Cas_utilisation_Ouvrir_caisse.html#diagramme-de-séquence-système-dss",
    "title": "Appendix C — Cas d’utilisation - Ouvrir la caisse",
    "section": "C.4 Diagramme de séquence système (DSS)",
    "text": "C.4 Diagramme de séquence système (DSS)\nLa figure C.2 est le diagramme de séquence système (DSS) pour le scénario « Ouvrir la caisse ».\n\n\nScénario: Ouvrir la caisse:Caissier:SystèmedémarrerOuvrirCaisse()authentifier(identifiant : String, mdp : String)confirmation, ouverture du tiroirposerPlateau(identifiant : String)saisirMontant(montant : Monnaie)fermerTiroir()\nFigure C.2: Diagramme de séquence système (DSS) pour le scénario « Ouvrir la caisse »"
  },
  {
    "objectID": "Annexe_Cas_utilisation_Ouvrir_caisse.html#contrats-dopération",
    "href": "Annexe_Cas_utilisation_Ouvrir_caisse.html#contrats-dopération",
    "title": "Appendix C — Cas d’utilisation - Ouvrir la caisse",
    "section": "C.5 Contrats d’opération",
    "text": "C.5 Contrats d’opération\nVoici les contrats pour chaque opération système.\nOpération : démarrerOuvrirCaisse()\nPostconditions :\n\nUne instance mp de MisePlateau a été créée.\n\nOpération : authentifier(identifiant : String, mdp : String)\nPostconditions :\n\nmp a été associé à un Caissier, sur la base de correspondance avec identifiant.\nLe Registre en cours a été associé à un Caissier, sur la base de correspondance avec identifiant.\n\nOpération : poserPlateau(identifiant : String)\nPostconditions\n\nmp a été associé à un PlateauBillets, sur la base de correspondance avec identifiant.\nLe Registre en cours a été associé à un PlateauBillets, sur la base de correspondance avec identifiant.\n\nOpération : saisirMontant(montant : Monnaie)\nPostconditions\n\nmp.montant est devenu montant.\n\nOpération : fermerTiroir()\nPostconditions :\n\nmp.dateHeure est devenue la date et l’heure actuelle.\nmp a été associé à GrandLivre.\nmp a été associé à Registre.\n\n\n\n\n\nLarman, Craig. 2005. UML 2 et design patterns. 3ᵉ éd. Paris: Village Mondial."
  }
]