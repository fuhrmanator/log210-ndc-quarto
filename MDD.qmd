# Modèle du domaine (MDD, modèle conceptuel) {#sec-mdd}

Les MDD sont expliqués en détail dans le chapitre 9\ {{< fa solid book >}}, mais voici des points importants:

- Les classes conceptuelles ne sont pas des classes logicielles. Ainsi, selon la méthodologie de Larman, *elles n'ont pas de méthodes*.
- Les classes ont des noms commençant avec une lettre majuscule, par exemple `Joueur`, et elles ne sont jamais au pluriel, par exemple ~~`Joueurs`~~.

## Classes conceptuelles

Il y a trois stratégies pour identifier les classes conceptuelles:

1. Réutiliser ou modifier des modèles existants.
2. Utiliser une liste de catégories.
3. Identifier des groupes nominaux.

### Catégories pour identifier des classes conceptuelles {#sec-categoriesClasses}

:Extrait du tableau 9.1\ {{< fa solid book >}}

**Catégorie** | **Exemples**
:----------|:----------
**Transactions d'affaires**: Elles sont essentielles, commencez l'analyse par les transactions. | *Vente*, *Attaque*, *Réservation*, *Inscription*, *EmpruntVélo*
**Lignes d'une transaction**: Éléments compris dans une transaction. |  *LigneArticles*, *ExemplaireLivre*, *GroupeCours*
**Produit ou service lié à une transaction ou à une ligne de transaction**: Pour quel concept sont faites des transactions?  |*Article*, *Vélo*, *Vol*, *Livre*, *Cours*
**Où la transaction est-elle enregistrée?** | *Caisse*, *GrandLivre*, *ManifesteDeVol*
**Rôle des personnes liées à la transaction**: Qui sont les parties impliquées dans une transaction?  | *Caissier*, *Client*, *JoueurDeMonopoly*, *Passager*
**Organisations liées à la transaction**: Quelles sont les organisations impliquées dans une transaction? | *Magasin*, *CompagnieAérienne*, *Bibliothèque*, *Université*
**Lieu de la transaction, lieu du service**  | *Magasin*, *Aéroport*, *Avion*, *Siège*, *LocalCours*
**Événements notables, à mémoriser**  | *Vente*, *Paiement*, *JeuDeMonopoly*, *Vol*
**Objets physiques**:  Important surtout lorsqu'il s'agit d'un logiciel de contrôle d'équipements ou de simulation.  | *Article*, *Caisse*, *Plateau*, *Pion*, *Dé*, *Vélo*
**Description d'entités**: Voir section 9.13 pour plus d'informations. | *DescriptionProduit*, *DescriptionVol*, *Livre* (en opposition avec *Exemplaire*), *Cours* (en opposition avec *CoursGroupe*)
**Catalogues**: Les descriptions se trouvent souvent dans des catalogues.  | *CatalogueProduits*, *CatalogueVols*, *CatalogueLivres*, *CatalogueCours*
**Conteneurs**: Un conteneur peut contenir des objets physiques ou des informations.  | *Magasin*, *Rayonnage*, *Plateau*, *Avion*, *Bibliothèque*
**Contenu d'un conteneur**  | *Article*, *Case (sur un Plateau de jeu)*, *Passager*, *Exemplaire*
**Autres systèmes externes**  | *SystèmeAutorisationPaiementsACrédit*, *SystèmeGestionBordereaux*
**Documents financiers, contrats, documents légaux**  | *Reçus*, *GrandLivre*, *JournalDeMaintenance*
**Instruments financiers**  | *Espèces*, *Chèque*, *LigneDeCrédit*
**Plannings, manuels, documents régulièrement consultés pour effectuer un travail**  | *MiseAJourTarifs*, *PlanningRéparations*

## Attributs

Les attributs sont le sujet de la section 9.16\ {{< fa solid book >}}.
Comme c'est le cas pour les classes et les associations, on fait figurer les attributs *quand les cas d'utilisation suggèrent la nécessité de mémoriser des informations*.

Pour l'UML, la syntaxe complète d'un attribut est:

**visibilité nom: type multiplicité = défaut {propriété}**

Voici des points importants:

- *Le type d'un attribut est important, et il faut le spécifier dans un MDD*, même si dans le livre de @craig_uml_2005, il y a plusieurs exemples sans type.
- On ne se soucie pas de la visibilité des attributs dans un MDD.
- Faites attention à la confusion des attributs et des classes. Si l'on ne pense pas un concept *X* en termes alphanumériques dans le monde réel, alors il s'agit probablement d'une classe conceptuelle. Par exemple, dans le monde réel, une université n'est composée ni de chiffres ni de lettres. Elle doit être une classe conceptuelle. Voir la section 9.12\ {{< fa solid book >}}.
- De la même manière, faites attention aux informations qui sont mieux modélisées par des associations. Par exemple, dans la @fig-MDD-jeu-de-risk, la classe `Pays` n'a pas un *attribut* `joueur:Joueur` (qui contrôle le Pays); elle a plutôt une *association* avec la classe `Joueur` et un verbe `contrôle`.

::: {.callout-warning appearance="simple"}
Il est vrai que dans un langage de programmation comme Java, les associations doivent être les attributs dans les classes, car il s'agit des classes *logicielles*.
Cependant, dans un modèle du domaine on évite des attributs si une association peut mieux décrire la relation.
La relation relie visuellement les deux classes conceptuelles et elle est décrite avec un verbe.
:::

## Associations

Les associations dans le MDD sont le sujet de la section 9.14\ {{< fa solid book >}}.
Il faut se référer au contenu du livre pour les détails.
Une association est une relation entre des classes (ou des instances de classes).
Elle indique une connexion significative ou intéressante.
Voici des points importants:

- Il est facile de trouver beaucoup d'associations, mais il faut se limiter à celles qui doivent être conservées un certain temps.
Pensez à la **mémorabilité** d'une association dans le contexte du logiciel à développer. Par exemple, considérez les associations de la @fig-MDD-jeu-de-risk:
  - Il existe une association entre `Joueur` et `Pays`, car il est important de savoir quel joueur contrôle quel pays dans le jeu Risk.
  - Il n'y a pas d'association entre `JeuRisk` et `Attaque`, même si les attaques font partie du jeu. Il n'est pas essentiel de mémoriser l'historique de toutes les attaques réalisées dans le jeu.
- Il y a des associations dérivées de la liste des associations courantes. Voir le @tbl-associations-courantes.
- En UML, les associations sont représentées par des lignes entre classes.
  - Elles sont nommées (avec un verbe commençant par une lettre majuscule).
  - Des mots simples comme "A", "Utilise", "Possède", "Contient", etc. sont généralement des choix médiocres, car ils n'aident pas notre compréhension du domaine. Essayez de trouver des mots plus riches, si possible.
  - Une flèche (triangle) de "sens de lecture" optionnelle indique la direction dans laquelle lire l'association. Si la flèche est absente, on lit l'association de gauche à droite ou de haut en bas.
  - Les extrémités des associations ont une expression de la multiplicité indiquant une relation numérique entre les instances des classes.
  Vous pouvez en trouver plusieurs exemples dans la @fig-MDD-jeu-de-risk.

: Extrait du tableau 9.2\ {{< fa solid book >}} (liste d'associations courantes) {#tbl-associations-courantes}

**Catégorie** | **Exemples**
:----------|:----------
**A est une transaction liée à une transaction B**| *PaiementEnEspèces -- Vente* \
*Réservation -- Annulation*\newline
**A est un élément d'une transaction B**| *LigneArticles -- Vente*\newline
**A est un produit pour une transaction (ou un élément de transaction) B**| *Article -- LigneArticles (ou Vente)* \
*Vol -- Réservation*\newline
**A est un rôle lié à une transaction B**| *Client -- Paiement* \
*Passager -- Billet*\newline
**A est une partie logique ou physique de B**| *Tiroir -- Registre* \
*Case -- Plateau* \
*Siège -- Avion*\newline
**A est physiquement ou logiquement contenu dans B**| *Registre -- Magasin* \
*Joueur -- Monopoly* \
*Passager -- Avion*\newline
**A est une description de B**| *DescriptionProduit -- Article* \
*DescriptionVol -- Vol*\newline
**A est connu/consigné/enregistré/saisi dans B**| *Vente -- Registre* \
*Pion -- Case* \
*Réservation -- ManifesteDeVol*\newline
**A est un membre de B**| *Caissier -- Magasin* \
*Joueur -- Monopoly* \
*Pilote -- CompagnieAérienne*\newline
**A est une sous-unité organisationnelle de B**| *Rayon -- Magasin* \
*Maintenance -- CompagnieAérienne*\newline
**A utilise, gère ou possède B**| *Caissier -- Registre* \
*Joueur -- Pion* \
*Pilote -- Avion*\newline
**A est voisin de B**| *Article -- Article* \
*Case -- Case* \
*Ville -- Ville*

## Exemple de MDD pour le jeu Risk

La @fig-MDD-jeu-de-risk est un MDD pour le jeu Risk, selon [l'exemple](#exemple-jeu-de-risk) mentionné dans le chapitre sur les cas d'utilisation.

```{.plantuml #fig-MDD-jeu-de-risk caption="Modèle du domaine du jeu Risk. [(PlantUML)](http://www.plantuml.com/plantuml/uml/VLJRRjD047ttLupyuXObWHGe8a9Lgr9LBPM8aW8lVTdOKsVnUZRi9IL2IF0tv9q_o9_m9SpQSPscKQLedVMScNFspAoFhHF6-L95jf0q4qQKODr28Qz6fbkHYKYBt6XFMQgLDk2C8CiX91SbuARI0ly4J0LbTqOwXmItcXn8WY-ICdrdewGjb-6jyCe518aIuOEHDgHSN9z6oVKKBO9sKpGMbDO5v0P5LMhy-HpsIb6mI6-GUN6Hy5CI7qOfp9ZJmCdL5NmQdut66-JGVx7_b00hyh3Gaoelg81BxGs9JMksKT-BD8DnQkJCFLLiY6oIiHk5DhrpncDaKy7jw4TJcI5WENCBAB6SXAnK2Mk36FG6VaG0f4iOm9XRHpbldzDaA1RsOvhwsMffEIIvKp_NUUzNooffplKvlmasLT6Ff2sQRJnKmg6etiKWB0n7JIXGF6Q_BtJYdFZciKPCwftWcQZvmZiMSejaTuYeb0idDQtJHwjbBakUj_OmqN04SJ-6PzqknAyEubhF04xPOyb8E7g0E8ph266buSowxWrbSYxjQid_sFMZg0MqXJk7dHjwqtdBQxybEUVRCCD04VO17S3zNk_PFIGmpBMqahfPGAwDhS6gMprPO0tygZtBuB7U1cOCV1rNFHlm2ARAXuCbe6HEuHx8ENkAa3Q7zWJ8LpD5KCBmLE_z-_LxFrgFIWm01uF3bh-X6bJ35BZNm5q72kwOrLyLS7iri5F5zg7NssXPb6nLuHBt_TkgaxJ-gSV8Tp0qsgt-vCWTqfuNKGzLz32jbjaCt02k1AKxctD3cx1w_h9kCC_iEdtdeFEoyVuot5Z6HCUSmf_7_m00)"}
@startuml
!include ecriture.pumlinclude
scale 1
hide empty members
class Joueur {
  nom : String
  /nbPaysOccupés : int
}
class Dé {
  valeur : int
}

class JeuRisk

class "PlateauRisk" as PR

class Pays {
  nom : String
}

class Attaque {
  nbAttaquant : int
  nbDéfenseur : int
}

class Occupation {
  nbRégiments : int
}

PR "1" *-- "42" Pays : Contient >
PR "1" *-- "6" Continent : Est-\ndivisé-\nen >
Continent "1" *-- "4,6,\n7,9,\n12" Pays : Groupe >
Pays "1" -- "1..*" Pays : Est-voisin-de >
JeuRisk "1" -l- "1" PR : Est-joué-sur >
JeuRisk "1" -d- "5" Dé : Inclut >
' ligne suivante contient un espace large ( )
Joueur "   2:6" -l- "1" JeuRisk : Joue >
Joueur "1" -- "1..*" Pays : Contrôle >
(Joueur, Pays) .. Occupation
'Joueur "1" -- "*" Régiment : Contrôle >
'Pays "1" -l- "*" Régiment : < Protège-\nou-\nattaque
Pays "1" -l- "1..*" Attaque : Lance >
Pays "1" -- "1..*\n" Attaque : Défend-contre >
Joueur "1" -- "1,2,3" Dé : Jette >

@enduml
```

## Attributs dérivés

Les attributs dérivés sont expliqués en détail dans la section 9.16\ {{< fa solid book >}}. 
Il s'agit des attributs qui sont calculés à partir d'autres informations reliées à la classe.
Ils sont indiqués par le symbole **`/`** devant leur nom.
L'exemple à la @fig-MDD-attribut-derive s'applique à la règle du jeu Risk spécifiant qu'un joueur reçoit un certain nombre de renforts selon le nombre de pays occupés. La classe Joueur pourrait avoir un attribut dérivé `/nbPaysOccupés` qui est calculé selon le nombre de Pays contrôlés par le joueur.

```{.plantuml #fig-MDD-attribut-derive caption="`nbPaysOccupés` est un attribut dérivé et sa valeur sera calculée selon le nombre de pays de l'association. [(PlantUML)](http://www.plantuml.com/plantuml/uml/VLB1QW8n4BtdAmOlsnRKUXKHYvHYArIwjZt7xEY6pKvaac2b-46zzm_yiSvQeM9123E4UNdlpKn68MgEgNOgL9RMcdKD8MuTIcHhpYeBRQeL-qI5ySupHDOKf8GKLGQnj07aQ2Wr5HksCIB1qbC4I_1kgV2ReB8_kWANEhdO84ZN24ziG_DaCX-hR5vYGF2nH0xWlAzWnQWFLFdR0rpLkXAJYL5qSPj9jYJDE8U5Q3BSJQVmcj-_v2VYqBkzlcGWw5KJwABB2LNmw1EJFXtDEUgZCWNaXkqwNYAReGo9mmdHwUmY9rJ1Q5b7JvMsGC1w7RTGOxreNXcdGsZCO6BuL03aQ-X3BgkZbLm7XpNr5oxXi4kBcTw6PsFIUlyL16Of3he7n53jZbmDv3_JJXqrMhqMjDkIEfsRrY-u3sDfXlVVOdAeHaY5_9aV)"}
@startuml
!include ecriture.pumlinclude
scale 1
hide empty members
class Joueur {
  nom : String
  <color:blue>/nbPaysOccupés : int</color>
}
class Pays {
  nom : String
}
Joueur "1" -- "1..*" Pays : Contrôle >
@enduml
```

## Classes de "description" et de catalogues

Deux catégories de classes conceptuelles qui vont de pair sont les *descriptions d'entités* et les *catalogues* qui agrègent les descriptions.
Elles sont expliquées en détail dans la section 9.13\ {{< fa solid book >}}.
Voici des conditions pour utiliser correctement une classe de description d'une autre classe "X":

- Il faut disposer de la description d'un produit ou d'un service "X" indépendamment de l'existence actuelle des "X". Par exemple, il pourrait y avoir une rupture de stock d'un Produit (aucune instance actuelle), mais on a besoin de connaître son prix. La classe DescriptionProduit permet d'avoir cette information, même s'il n'y a plus d'instances de Produit. 
Un autre exemple est un trimestre où un cours *LOG711* ne se donne pas (il n'y a pas de GroupeCours de LOG711 dans le trimestre actuel).
Alors, une classe Cours (qui joue le rôle de description) sert pour spécifier le nombre de crédits, les cours préalables, etc.
- La suppression d'instances de "X" entraîne la perte de l'information qui doit être mémorisée, mais a été incorrectement associée à l'entité en question.
- La classe de description réduit la duplication des informations.

La @fig-MDD-CoursGroupeCoursDescription présente une classe de description pour le contexte de cours et groupe-cours.

```{.plantuml #fig-MDD-CoursGroupeCoursDescription caption="Cours joue le rôle de description d'entités (les groupes-cours)."}
@startuml
'!include ecriture.pumlinclude
skinparam defaultFontName Arial
skinparam style strictuml
hide empty members
scale 1
hide empty members
class "GroupeCours" as GC {
  numéro : Entier
  trimestre : Trimestre
  ...
}
class "Cours" as C #ddffdd {
  nom : Texte
  nbCrédits : Entier
  ...
}
class "Catalogue\nCours" as CP #ddffdd
C "1" -- "*" GC : Décrit >
C "1" -- "*" C : Est-préalable >
CP "1" - "*" C : Répertorie >
note bottom of C
Classe de « description ». Une instance de Cours peut exister 
indépendamment de l'existence d'un GroupeCours qu'elle décrit 
(par exemple, avant qu'un cours soit donné la première fois).
Elle réduit également la duplication des informations (le nom et 
le nombre de crédits ne sont pas stockés dans chaque GroupeCours).
end note
@enduml
```

::: {.callout-warning}
Attention de ne pas faire l'erreur naïve d'utiliser une classe de description simplement pour "décrire" une autre classe. Voir la @fig-MDD-ErreurDescription pour un exemple.
:::


```{.plantuml #fig-MDD-ErreurDescription caption="Erreur fréquente: utiliser une classe de description sans justification."}
@startuml
'!include ecriture.pumlinclude
skinparam defaultFontName Arial
skinparam style strictuml
hide empty members
scale 1
hide empty members
class "Client" as GC {
}
class "Description\nClient" as C #ffdddd {
  nom : Texte
  identifiant : IDClient
  ...
}
class "Catalogue\nClients" as CP #ffdddd
C "1" -- "1" GC : Décrit >
CP "1" -r- "*" C : Répertorie >
note bottom of C
<size:14><#red:frowning:></size> Mauvaise classe de « description ». Il n'est pas nécessaire 
d'avoir cette classe, car les clients sont décrits dans leur 
propre classe Client. Si un client n'existe pas, il n'a pas de
sens dans le MDD. Les informations ne seraient pas dupliquées 
s'il n'y avait pas cette classe (chaque client a un nom et un
identifiant unique).
end note
@enduml
```

## Classes d'association

Les classes d'association dans un MDD sont le sujet de la section A31.10/F26.10\ {{< fa solid book >}}.

::: {.callout}
Une classe d'association permet de traiter une association comme une classe et de la modéliser avec des attributs...
:::

Il pourrait être utile d'avoir une classe d'association dans un MDD:

- si un attribut est lié à une association;
- si la durée de vie des instances de la classe d'association dépend de l'association;
- s'il y a une association *N*-*N* entre deux concepts et des informations liées à l'association elle-même.

Dans l'exemple à la @fig-MDD-classe-association, voici pourquoi il y a une classe d'association Occupation. 
Lorsqu'un Joueur contrôle un Pays, il doit y avoir des armées dans ce dernier. 
Le MDD pourrait avoir un attribut `nbRégiments` dans la classe Pays. 
Cependant, l'attribut `nbRégiments` est lié à l'association entre le Joueur et le Pays qu'il contrôle, alors on décide d'utiliser une classe d'association. 

Si un Joueur envahit un Pays, la nouvelle instance de la classe d'association Occupation sera créée (avec la nouvelle association). 
Pourtant, cette instance d'Occupation sera détruite si un autre Joueur arrive à prendre le contrôle du Pays. 
Alors, la durée de vie de cette instance dépend de l'association. 

Voir le livre obligatoire pour plus d'exemples.

```{.plantuml #fig-MDD-classe-association caption="Classe d'association dans le MDD Jeu Risk. [(PlantUML)](http://www.plantuml.com/plantuml/uml/VPBFIWD13CRl0xv3wALLRB5N3r8f8bL1wVhddCwckyFEP4fc5YtY0tdt3NmnirPm4ImCayFtI_9bChEKKN8Rl4cDumqA1aXvwqblSRPJ3dhI2crJIMovjD57WIp8IINYV626a6kNG0z2ZLm-YykP6DQHCpY69yTbV4uA_XOiQOsjpnt260YknQKkPt4_L-w-faGGSqsImCVOG2M4tyMAnqiO1MpKQ2kadMaxrEXO1_AUIkqgS7vp0m_5nRBejOVfoM5_fByE4bRTnVjzBhY1gzWAez_BlJIsXCAAs-Izt1tfKqdg6-i_OPQMJBAeUvcQsfK453Pv2u72IjECzPXIPuXQWLS3m370AHIwGwxCsuz-XzlqltfhRRl1x2BlcDNoyxroGLUR57QSbVpfC9WEO3pMC9aS3NPbJs6kiyZdXreyCwCTUFoj7S9aqgjkPiIb_gil)"}
@startuml
!include ecriture.pumlinclude
scale 1
hide empty members
class Joueur {
  nom : String
}
class Pays {
  nom : String
}
class Occupation {
  nbRégiments : int
}
Joueur "1" -- "1..*" Pays : Contrôle >
(Joueur, Pays) .. Occupation
@enduml
```

## Affinement du MDD

Lorsqu'on modélise un domaine, il est normal de commencer avec un modèle simple (à partir d'un ou de deux cas d'utilisation) et ensuite de l'affiner dans les itérations suivantes, où on y intègre d'autres éléments plus subtils ou complexes du problème qu'on étudie.
Les détails de cette approche sont présentés dans le chapitre F26/A31\ {{< fa solid book >}}.
Bien que la matière soit présentée plus tard dans le livre, ce sont des choses à savoir pour la modélisation d'un domaine, même dans une première itération.

Voici un résumé des points importants traités dans ce chapitre, dont quelques-uns ont déjà été présentés plus haut:

- Composition, par exemple la classe Continent qui groupe les Pays dans la @fig-MDD-jeu-de-risk. Larman propose d'utiliser la composition lorsque:
  - la durée de vie du composant est limitée à celle du composite (lorsqu'un objet Continent est instancié, ça doit grouper des instances de Pays pour être cohérent), il existe une dépendance création-suppression de la partie avec le tout (ça ne fait pas de sens de supprimer un objet Pays d'une instance de Continent dans le jeu Risk);
  - il existe un assemblage logique ou physique évident entre le tout et les parties (on ne peut construire un Continent sans les Pays);
  - certaines propriétés du composite, comme son emplacement, s'étendent aux composants;
  - les opérations que l'on peut appliquer au composite, telles que destruction, déplacement et enregistrement, se propagent aux composants.
- Généralisation/spécialisation, voir le livre pour les exemples et les directives, notamment la règle des 100% (conformité à la définition) et la règle "est-un" (appartenance à l'ensemble).
- Attribut dérivé, par exemple, `/nbPaysOccupés` dans la classe Joueur est un attribut dérivé de l'association entre Joueur et Pays (@fig-MDD-attribut-derive).
- Hiérarchies dans un MDD et héritage dans l'implémentation.
- Noms de rôles.
- Organisation des classes conceptuelles en Packages (surtout lorsque le MDD contient un nombre important de classes conceptuelles).

## FAQ MDD

### Y a-t-il un MDD pour chaque cas d'utilisation?{#mddchaquecasutilisation}

Selon la méthodologie de ce manuel, bien qu'une application ait souvent plusieurs fonctionnalités (cas d'utilisation), il n'y a qu'un seul MDD.

Cela dit, le MDD est comme un fichier de code source, puisque sa *version* peut évoluer avec le projet.
Le MDD évoluera normalement après chaque itération, car on fait une nouvelle analyse pour les nouvelles fonctionnalités visées dans l'itération.
Au début du projet, le MDD est plus simple, puisqu'il porte sur seulement les cas d'utilisation ciblés à la première itération.
Le MDD devient plus riche au fur et à mesure qu'on avance dans les itérations, parce qu'il modélise davantage de concepts reliés aux problèmes traités par les nouvelles fonctionnalités à réaliser.

Par exemple, la version initiale du MDD (chapitre 9\ {{< fa solid book >}}) ne traite pas la fonctionnalité de paiement par carte de crédit.
Les classes conceptuelles modélisant la problématique de paiement par carte de crédit sont absentes dans le MDD initial.
Plus tard (après plusieurs itérations, dans le chapitre sur le raffinement du MDD), on voit un MDD beaucoup plus riche qui reflète la modélisation des concepts reliés à des fonctionnalités comme les paiements par carte de crédit, les demandes d'autorisation de paiement, etc.

### Un **modèle du domaine** est-il la même chose qu'un **modèle de données**? {#mdd_donnees}

Voici la réponse de Craig Larman [-@craig_uml_2005] dans la section 9.2\ {{< fa solid book >}}:

::: {.callout}
Un **modèle du domaine** n'est pas un **modèle de données** (qui représente par définition des objets persistants stockés quelque part).
:::

Il peut y avoir des concepts dans un domaine qui ne sont pas dans la base de données.
Considérez l'exemple de la carte de crédit utilisée pour payer, mais qui n'est jamais stockée pour les raisons de sécurité.
Avec seulement un modèle de données, cette classe conceptuelle ne serait jamais modélisée.
Larman précise:

::: {.callout}
N'excluez donc pas une classe simplement parce que les spécifications n'indiquent pas un besoin évident de mémoriser les informations la concernant (un critère courant pour la modélisation des données quand on conçoit des bases de données relationnelles, mais qui n'a pas cours en modélisation d'un domaine), ou parce que la classe conceptuelle ne possède pas d'attributs. Il est légal d'avoir une classe conceptuelle sans attribut, ou une classe conceptuelle qui joue un rôle exclusivement comportemental dans le domaine.
:::

Vous pouvez aussi lire [cette question](https://stackoverflow.com/q/3507671/1168342) {{< fa brands stack-overflow >}}.

## Exercices

::: {#exr-MDD-trouver-classes-conceptuelles-catégorie}

### Classes conceptuelles trouvées par catégorie

À partir du [cas d'utilisation _Réserver un livre de la bibliothèque_](#sec-CU_Réserver_livre), trouvez des classes conceptuelles candidates en utilisant une liste de catégories de classes.
Vous pouvez remplir un tableau comme ceci:

| [**Catégorie de classe conceptuelle**](#sec-categoriesClasses)      | **Classes candidates selon le cas d'utilisation** |
|:----------- |:----------- |
|Transaction d'affaires (métier) |  _Réservation_ (ceci est un exemple)    |    
| (Continuez avec d'autres catégories) | |
| (Certaines catégories ne s'appliqueront pas.) | |
| | (Certaines classes candidates seront découvertes par plusieurs catégories)  |
| | |
| | |
| | |
| | |

: {tbl-colwidths="[40,60]"}

:::
<!-- ::: {.solution}
 **Catégorie de classe conceptuelle** | **Classes candidates selon le cas d'utilisation** 
:----------|:----------
Transactions d'entreprise  | Réservation
Rôles des personnes, organisation  | Membre, Bibliothèque
Produit ou service lié à une transaction ou une ligne de transaction | Livre, Exemplaire
Lieu de la transaction  | Bibliothèque
Objets physiques | Livre, Exemplaire
Descriptions d'objets (**voir sec. 9.13!**)  | Livre (décrit la classe Exemplaire dont les objets peuvent tous être empruntés)
Catalogue | CatalogueLivre
::: -->


::: {#exr-MDD-trouver-classes-conceptuelles-noms}

### Classes conceptuelles trouvées à l'aide de groupes nominaux

Cette fois-ci, utilisez les groupes nominaux pour trouver des classes conceptuelles candidates.
Commencez par souligner ou par mettre en surbrillance les noms et les groupes nominaux dans le [cas d'utilisation _Réserver un livre de la bibliothèque_](#sec-CU_Réserver_livre).
Les groupes nominaux peuvent être des classes ou des attributs, ou peuvent ne pas s'appliquer du tout.
Faites une liste de classes conceptuelles candidates (sans doublons).
:::
<!-- ::: {.solution}
Bibliothèque \
Liste de livres \
Membre \
Nom \
Reservation \
Livre \
Titre \
Auteur \
ISBN \
Maison d'édition \
Numéro de l'édition \
Année \
Exemplaires \
Nombres \
Code \
Disponibilité \
Réservation \
Numéro de confirmation \
Nom du membre \
Code de l'exemplaire 
::: -->


::: {#exr-MDD-comparer-classes-candidates}

### Comparaison des approches

Comparez la liste des classes trouvées dans l'@exr-MDD-trouver-classes-conceptuelles-noms avec les classes trouvées dans l'@exr-MDD-trouver-classes-conceptuelles-catégorie.
Quelles sont les différences?

:::


{{< include _callout_conseils_diagrammes.qmd >}}

::: {#exr-MDD-diagramme}

### Diagramme de classes conceptuelles

À partir du [cas d'utilisation _Réserver un livre de la bibliothèque_](#sec-CU_Réserver_livre), esquissez le modèle du domaine correspondant au domaine de l'application (cela comprend des **classes**, des **attributs** et des **associations**).

1. Considérez les classes candidates provenant de l'@exr-MDD-trouver-classes-conceptuelles-catégorie et de l'@exr-MDD-trouver-classes-conceptuelles-noms.
1. Notez que les classes candidates dénichées ne sont pas toujours importantes.
Certains concepts sont des attributs.
D'autres (surtout avec l'approche linguistique) n'ont rien à voir avec le problème du domaine. 
Vous devez appliquer les directives vues dans le chapitre 9 de @craig_uml_2005.
1. Faites attention à bien modéliser la classe de "description" dans ce problème.
1. Tout attribut doit avoir un type.
1. Limitez-vous à des associations "mémorisables" dans le contexte de l'application du logiciel (ne pas faire des associations hors de la portée du cas d'utilisation).
1. Vérifiez les cardinalités.
1. Vérifiez les verbes sur les associations ainsi que le sens de lecture.

:::
