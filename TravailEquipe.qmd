# Développement de logiciel en équipe

Le développement de logiciels se fait souvent en équipe.
Cependant, il y a des défis pour travailler en équipe.
Souvent, avant l'université on apprend comment s'organiser en équipe, faire des rencontres, répartir le travail, planifier, etc.
Pourtant, il y a d'autres défis dans ce travail, des défis sur le plan humain.
C'est le sujet du livre "Team Geek" [-@fitzpatrick_team_2012] écrit par Brian W. Fitzpatrick (ancien employé de Google) et Ben Collins-Sussman (développeur fondateur du système de contrôle de version Subversion, employé de Google).

Aujourd'hui, la demande pour le talent en technologies de l'information est importante.
Les technologies évoluent constamment et le temps que vous investissez pour maîtriser une technologie est important.
Pourtant, il y a des risques avec certains investissements de temps à long terme.
Par exemple, qui développe du code encore pour [Flash](https://fr.wikipedia.org/wiki/Adobe_Flash)\ {{< fa brands wikipedia-w >}}?
Cette technologie est maintenant désuète et ça ne vaut pas beaucoup de mentionner cette compétence sur un CV.

La bonne nouvelle est qu'une "technologie" ne changera jamais: le comportement humain.
Donc, il est toujours rentable d'investir du temps pour mieux maîtriser cet aspect du développement.
Les entreprises en technologies de l'information sont toujours à la recherche de développeurs qui ont également des compétences générales (*soft skills*).

@fitzpatrick_team_2012 abordent des problèmes dus aux tendances comportementales chez les développeurs.
Par exemple, une personne n'a pas toujours envie de montrer son code source aux autres membres de l'équipe pour plusieurs raisons:

- Son code n'est pas fini.
- Elle a peur d'être jugée.
- Elle a peur que quelqu'un vole son idée.

Dans tous ces cas, il s'agit de l'insécurité et c'est tout à fait normal.
Par contre, ce genre de comportement augmente certains risques dans le développement:

- de faire des erreurs dans la conception initiale;
- de "réinventer la roue";
- de terminer le travail plus tard que son compétiteur, qui, lui, a collaboré avec son équipe.

@fitzpatrick_team_2012 le disent et c'est un fait: si nous sommes tous plus ou moins compétents sur le plan technique, ce qui fera la différence importante dans une carrière est notre habileté à collaborer avec les autres.

![Pratiquement tout conflit social est dû à un manque d'humilité, de respect ou de confiance.](images/HRC_venn.svg){width=40% #fig-HRC_venn}

## Humilité, Respect, Confiance

L'humilité, le respect et la confiance (voir la @fig-HRC_venn) sont les qualités de base pour le bon travail en équipe.
Cette section présente ces aspects en détail.

### Humilité

Voici la définition d'*humilité* selon Antidote:

::: {.callout}
*Disposition à s'abaisser volontairement, par sentiment de sa propre faiblesse.*
:::

Une personne humble pense ainsi [@fitzpatrick_team_2012]:

- Je ne suis pas le centre de l'univers.
- Je ne suis ni omniscient ni infaillible.
- Je suis ouvert à m'améliorer.

::: {.callout-important}
L'humilité ne veut pas dire "je n'ai pas de valeur" ou "j'accepte d'être mal traité.e par les autres". Voir la section [Proposer des solutions au besoin](#sec-solution_problemes_equipes).
:::

![Éviter d'être le ["Centre de l'univers"](https://www.flickr.com/photos/diamondduste/466060240/) ([CC BY-NC-ND 2.0](https://creativecommons.org/licenses/by-nc-nd/2.0/)) par [Diamondduste](https://www.flickr.com/people/diamondduste/).](images/flickr_diamondduste_center.jpg){width="200px"}

![["Missing"](https://www.flickr.com/photos/smkybear/2705041322/) ([CC BY-SA 2.0](https://creativecommons.org/licenses/by-sa/2.0/)) par [smkybear](https://www.flickr.com/people/smkybear/).](images/flickr_smkybear_missing.jpg){width="200px"}

```{.plantuml #fig-moi_inf_equipe caption="Un membre de l'équipe humble va accepter une décision prise par l'équipe, même s'il n'est pas en accord à 100%. [(PlantUML)](http://www.plantuml.com/plantuml/uml/JO_1IWH134Jl_HLXFIpCHIzUP1aMFViHcUxqJfZkT9jaq1L_mE_onvn1aArJKQyegBCvgg-rX2DqZWiWv2OEBE0pGMfn8JqQsDMSQh25fQDYXKGPr-9xMR0IV2mnWKNbxZSjfUWebqBFJHFfIojDmHN5DaxYOUP4GBNx5IhLYTJ-eiWQ2zqisOoflRDS86Cn2l_BS3WPVzBJuyCu33_VRojtWX5U6m_3wNv7um7kSfusVKtJRiAP96sVVm40)" }
@startuml
' pick a font in the docker's system
skinparam defaultfontname xkcd script
skinparam rectangleBorderColor transparent
hide empty members
hide circle
skinparam shadowing false
rectangle "<size:50>**Équipe > Moi**</size>" #ffbbbb|bbffbb
@enduml
```

Quelques exemples concrets d'humilité dans le développement:

- Un membre de l'équipe débutant en JavaScript, git, etc. va le reconnaître et va même faire des exercices sur Internet pour s'améliorer.
- Un membre de l'équipe (même le chef d'équipe) qui a pris une mauvaise décision (technique ou autre) va l'avouer. Il sait que les autres ne sont pas là pour l'attaquer (ils le respectent).
- Un membre de l'équipe va travailler fort pour que *son équipe* réussisse.
- Un membre de l'équipe qui reçoit une critique ne va pas la prendre personnellement.
Il sait que la qualité de son code n'équivaut pas à son estime de soi. (Cela n'est pas toujours facile!)

### Respect

Une personne démontrant du respect pense ainsi [@fitzpatrick_team_2012]:

- Je me soucie des gens avec qui je travaille.
- Je les traite comme des êtres humains.
- J'ai de l'estime pour leurs capacités et leurs réalisations.

### Confiance

Une personne démontrant la confiance pense ainsi [@fitzpatrick_team_2012]:

- Je crois que les autres membres de l'équipe sont compétents et qu'ils feront la bonne chose.
- Je suis à l'aise lorsqu'ils prennent le volant, le cas échéant.

Le dernier point peut être extrêmement difficile si vous avez déjà été déçu par une personne incompétente à qui vous avez délégué une tâche.

## Redondance des compétences dans l'équipe (Bus Factor) {#sec-Bus_Factor}

Pour qu'une équipe soit robuste, il faut une redondance des compétences.
Sinon, la perte d'un membre de l'équipe (pour une raison quelconque) peut engendrer de graves conséquences, voire arrêter carrément le développement.
Ce principe a été nommé en anglais *Bus factor*.
C'est le nombre minimum de membres à perdre (par exemple, ils ont été heurtés par un bus) pour arrêter le projet par manque de personnel bien informé ou compétent.
Par exemple, dans un projet de stage, si c'est vous qui écrivez tout le code, alors c'est un *bus factor* de 1.
Si vous n'êtes plus là, le projet s'arrête!

![*Facteur de bus* (nom): le nombre de personnes qui doivent être heurtées par un bus avant que votre projet ne soit complètement condamné. [@fitzpatrick_team_2012] ["Male and Female software engineers in front of a bus at a crosswalk, flat lighting, tilt shift photography"](https://labs.openai.com/s/TlB4Qh8FCn4LGA0efsTdEgyQ) par Cris\ ×\ DALL·E](images/DALL-E_BusFactor.png){width="500px"}

Dans le cas d'une équipe, un membre de l'équipe peut être absent ou moins disponible pour beaucoup de raisons.
Par exemple, il part en vacances, il tombe malade, il prend un congé parental, il change d'emploi, il abandonne le cours (contexte de projet universitaire), etc.
Cherchez à répartir les responsabilités dans l'équipe afin d'avoir un *bus factor* d'au moins 2.
Partagez des compétences pour maintenir une équipe robuste.

Vous pouvez également garder votre solution *simple* et garder la documentation de votre conception à jour.
L'automatisation des tests dans un processus de construction de logiciel (*build process*) à la devops (@sec-tdd) aide aussi, car l'équipe ne dépend pas d'une personne pour construire la solution, rouler les tests, etc.
Ces pratiques vont également faciliter l'intégration de nouvelles personnes dans l'équipe.

::: {.callout-warning}
Si un membre de l'équipe quitte en cours du trimestre, il n'est pas facile de maintenir le même rythme.
Cependant, les enseignantes ou les enseignants et les auxiliaires de laboratoire s'attendront à ce que vous ayez pensé à un "plan B" avant de perdre le membre de l'équipe.
Au moins un autre membre de l'équipe doit être au courant de ce que faisait l'ancien membre de l'équipe, pour que le projet ne soit pas complètement arrêté.
:::

## Mentorat

Pour les raisons pédagogiques [@oakley2004turning], c'est l'enseignant qui décide la composition des équipes.
Ça veut dire que forcément certains membres de l'équipe ont plus d'expérience et de facilité à faire certaines tâches que d'autres.
Les équipes doivent composer avec cette diversité.

Selon @fitzpatrick_team_2012:

::: {.callout}
Si vous avez déjà un bon bagage en programmation, ça peut être pénible de voir un autre membre de l'équipe moins expérimenté tente un travail qui lui prendra beaucoup de temps lorsque vous savez que ça vous prendra juste quelques minutes.
Apprendre à quelqu'un comment faire une tâche et lui donner l'occasion d'évoluer tout seul est un défi au début, mais cela est une caractéristique importante du leadership.
:::

Si les plus forts n'aident pas les autres, ils risquent de les éloigner de l'équipe et de se trouver seuls sur le plan des contributions techniques. 
Voir la section sur la [Redondance des compétences dans l'équipe (Bus Factor)](#sec-Bus_Factor).

Encadrer un membre de l'équipe au début du trimestre peut prendre beaucoup de temps.
Mais, si la personne devient plus autonome, c'est un gain pour toute l'équipe.
Cela augmente également le facteur de bus.

Voici quelques conseils pour le mentorat:

- avoir les compétences sur un plan technique;
- être capable d'expliquer des choses à quelqu'un d'autre;
- savoir combien d'aide à donner à la personne encadrée.

Le dernier point est important parce que si vous donnez trop d'informations, la personne peut vous ignorer plutôt que vous dire gentiment qu'elle a compris [@fitzpatrick_team_2012].
En plus, donner un faible niveau d'orientation à une personne ayant déjà une expérience est plus efficace que donner une orientation explicite [@oakley2021uncommon;@chen2017expertise].
Un bon mentor doit pouvoir estimer le niveau de la personne et lui donner une orientation appropriée, ce qui n'est pas toujours facile.
Mais sachez que "moins est plus" dans certains cas.

![Encadrer les membres de l'équipe est une habileté à mettre sur son CV ["CultureTECH BT Monster Dojo"](https://www.flickr.com/photos/24498081@N06/10081683216/) ([CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)) par [connor2nz](https://www.flickr.com/people/24498081@N06/).](https://farm8.static.flickr.com/7459/10081683216_2b02836f82_b.jpg){width="400px"}

## Scénarios

Considérez les volets HRC lorsque vous vous trouvez dans une des situations suivantes:

- un membre de l'équipe se trouve à être le seul à faire de la programmation.
  - il ne fait plus confiance aux autres membres de l'équipe, car leur code est trop bogué.
  - il n'a pas la patience pour accommoder les membres de l'équipe moins expérimentés.
  - il croit que les autres auraient dû apprendre mieux à programmer dans les cours préalables.
- un membre de l'équipe dit qu'il a "fait ses 3 heures de contribution" chaque dimanche chez lui et que ça devrait suffire pour sa partie (il a un emploi et n'a pas beaucoup de temps disponible pour l'équipe du projet universitaire).
- un ou deux membres d'une équipe abandonnent le cours après les évaluations de mi-trimestre, par crainte d'échec.
- un membre de l'équipe suit cinq (!) cours en même temps et n'a pas le temps suffisant pour travailler correctement dans les laboratoires de cette matière.
- plusieurs membres de l'équipe sont "expérimentés", mais ils ont de la difficulté à s'entendre sur l'orientation du projet.
- l'équipe n'est pas cohésive; chacun fait avancer sa partie, mais le code ne fonctionne pas ensemble.

Vous devez en parler avec votre équipe.
Si la situation ne s'améliore pas, vous devez en parler avec une personne ressource, comme votre superviseur (en stage), les auxiliaires de laboratoire ou l'enseignant ou l'enseignante.

Pour mieux évaluer le travail de chacun dans l'équipe au laboratoire, il y a des conseils dans la section [Évaluer les contributions des membres de l'équipe](#sec-ContributionsEquipe).
